type Query {
  aggregateAdmin(
    where: AdminWhereInput
    orderBy: [AdminOrderByWithRelationInput!]
    cursor: AdminWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateAdmin!
  findFirstAdmin(
    where: AdminWhereInput
    orderBy: [AdminOrderByWithRelationInput!]
    cursor: AdminWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AdminScalarFieldEnum!]
  ): Admin
  admins(
    where: AdminWhereInput
    orderBy: [AdminOrderByWithRelationInput!]
    cursor: AdminWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AdminScalarFieldEnum!]
  ): [Admin!]!
  admin(where: AdminWhereUniqueInput!): Admin
  groupByAdmin(
    where: AdminWhereInput
    orderBy: [AdminOrderByWithAggregationInput!]
    by: [AdminScalarFieldEnum!]!
    having: AdminScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [AdminGroupBy!]!
  aggregateAdminChat(
    where: AdminChatWhereInput
    orderBy: [AdminChatOrderByWithRelationInput!]
    cursor: AdminChatWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateAdminChat!
  findFirstAdminChat(
    where: AdminChatWhereInput
    orderBy: [AdminChatOrderByWithRelationInput!]
    cursor: AdminChatWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AdminChatScalarFieldEnum!]
  ): AdminChat
  adminChats(
    where: AdminChatWhereInput
    orderBy: [AdminChatOrderByWithRelationInput!]
    cursor: AdminChatWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AdminChatScalarFieldEnum!]
  ): [AdminChat!]!
  adminChat(where: AdminChatWhereUniqueInput!): AdminChat
  groupByAdminChat(
    where: AdminChatWhereInput
    orderBy: [AdminChatOrderByWithAggregationInput!]
    by: [AdminChatScalarFieldEnum!]!
    having: AdminChatScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [AdminChatGroupBy!]!
  aggregateAdminChatMessage(
    where: AdminChatMessageWhereInput
    orderBy: [AdminChatMessageOrderByWithRelationInput!]
    cursor: AdminChatMessageWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateAdminChatMessage!
  findFirstAdminChatMessage(
    where: AdminChatMessageWhereInput
    orderBy: [AdminChatMessageOrderByWithRelationInput!]
    cursor: AdminChatMessageWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AdminChatMessageScalarFieldEnum!]
  ): AdminChatMessage
  adminChatMessages(
    where: AdminChatMessageWhereInput
    orderBy: [AdminChatMessageOrderByWithRelationInput!]
    cursor: AdminChatMessageWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AdminChatMessageScalarFieldEnum!]
  ): [AdminChatMessage!]!
  adminChatMessage(where: AdminChatMessageWhereUniqueInput!): AdminChatMessage
  groupByAdminChatMessage(
    where: AdminChatMessageWhereInput
    orderBy: [AdminChatMessageOrderByWithAggregationInput!]
    by: [AdminChatMessageScalarFieldEnum!]!
    having: AdminChatMessageScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [AdminChatMessageGroupBy!]!
  aggregateApplicantProfile(
    where: ApplicantProfileWhereInput
    orderBy: [ApplicantProfileOrderByWithRelationInput!]
    cursor: ApplicantProfileWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateApplicantProfile!
  findFirstApplicantProfile(
    where: ApplicantProfileWhereInput
    orderBy: [ApplicantProfileOrderByWithRelationInput!]
    cursor: ApplicantProfileWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ApplicantProfileScalarFieldEnum!]
  ): ApplicantProfile
  applicantProfiles(
    where: ApplicantProfileWhereInput
    orderBy: [ApplicantProfileOrderByWithRelationInput!]
    cursor: ApplicantProfileWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ApplicantProfileScalarFieldEnum!]
  ): [ApplicantProfile!]!
  applicantProfile(where: ApplicantProfileWhereUniqueInput!): ApplicantProfile
  groupByApplicantProfile(
    where: ApplicantProfileWhereInput
    orderBy: [ApplicantProfileOrderByWithAggregationInput!]
    by: [ApplicantProfileScalarFieldEnum!]!
    having: ApplicantProfileScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ApplicantProfileGroupBy!]!
  aggregateApplication(
    where: ApplicationWhereInput
    orderBy: [ApplicationOrderByWithRelationInput!]
    cursor: ApplicationWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateApplication!
  findFirstApplication(
    where: ApplicationWhereInput
    orderBy: [ApplicationOrderByWithRelationInput!]
    cursor: ApplicationWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ApplicationScalarFieldEnum!]
  ): Application
  applications(
    where: ApplicationWhereInput
    orderBy: [ApplicationOrderByWithRelationInput!]
    cursor: ApplicationWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ApplicationScalarFieldEnum!]
  ): [Application!]!
  application(where: ApplicationWhereUniqueInput!): Application
  groupByApplication(
    where: ApplicationWhereInput
    orderBy: [ApplicationOrderByWithAggregationInput!]
    by: [ApplicationScalarFieldEnum!]!
    having: ApplicationScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ApplicationGroupBy!]!
  aggregateChat(
    where: ChatWhereInput
    orderBy: [ChatOrderByWithRelationInput!]
    cursor: ChatWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateChat!
  findFirstChat(
    where: ChatWhereInput
    orderBy: [ChatOrderByWithRelationInput!]
    cursor: ChatWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ChatScalarFieldEnum!]
  ): Chat
  chats(
    where: ChatWhereInput
    orderBy: [ChatOrderByWithRelationInput!]
    cursor: ChatWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ChatScalarFieldEnum!]
  ): [Chat!]!
  chat(where: ChatWhereUniqueInput!): Chat
  groupByChat(
    where: ChatWhereInput
    orderBy: [ChatOrderByWithAggregationInput!]
    by: [ChatScalarFieldEnum!]!
    having: ChatScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ChatGroupBy!]!
  aggregateChatMessage(
    where: ChatMessageWhereInput
    orderBy: [ChatMessageOrderByWithRelationInput!]
    cursor: ChatMessageWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateChatMessage!
  findFirstChatMessage(
    where: ChatMessageWhereInput
    orderBy: [ChatMessageOrderByWithRelationInput!]
    cursor: ChatMessageWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ChatMessageScalarFieldEnum!]
  ): ChatMessage
  chatMessages(
    where: ChatMessageWhereInput
    orderBy: [ChatMessageOrderByWithRelationInput!]
    cursor: ChatMessageWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ChatMessageScalarFieldEnum!]
  ): [ChatMessage!]!
  chatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  groupByChatMessage(
    where: ChatMessageWhereInput
    orderBy: [ChatMessageOrderByWithAggregationInput!]
    by: [ChatMessageScalarFieldEnum!]!
    having: ChatMessageScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ChatMessageGroupBy!]!
  aggregateEmployerProfile(
    where: EmployerProfileWhereInput
    orderBy: [EmployerProfileOrderByWithRelationInput!]
    cursor: EmployerProfileWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateEmployerProfile!
  findFirstEmployerProfile(
    where: EmployerProfileWhereInput
    orderBy: [EmployerProfileOrderByWithRelationInput!]
    cursor: EmployerProfileWhereUniqueInput
    take: Int
    skip: Int
    distinct: [EmployerProfileScalarFieldEnum!]
  ): EmployerProfile
  employerProfiles(
    where: EmployerProfileWhereInput
    orderBy: [EmployerProfileOrderByWithRelationInput!]
    cursor: EmployerProfileWhereUniqueInput
    take: Int
    skip: Int
    distinct: [EmployerProfileScalarFieldEnum!]
  ): [EmployerProfile!]!
  employerProfile(where: EmployerProfileWhereUniqueInput!): EmployerProfile
  groupByEmployerProfile(
    where: EmployerProfileWhereInput
    orderBy: [EmployerProfileOrderByWithAggregationInput!]
    by: [EmployerProfileScalarFieldEnum!]!
    having: EmployerProfileScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [EmployerProfileGroupBy!]!
  aggregateResume(
    where: ResumeWhereInput
    orderBy: [ResumeOrderByWithRelationInput!]
    cursor: ResumeWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateResume!
  findFirstResume(
    where: ResumeWhereInput
    orderBy: [ResumeOrderByWithRelationInput!]
    cursor: ResumeWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ResumeScalarFieldEnum!]
  ): Resume
  resumes(
    where: ResumeWhereInput
    orderBy: [ResumeOrderByWithRelationInput!]
    cursor: ResumeWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ResumeScalarFieldEnum!]
  ): [Resume!]!
  resume(where: ResumeWhereUniqueInput!): Resume
  groupByResume(
    where: ResumeWhereInput
    orderBy: [ResumeOrderByWithAggregationInput!]
    by: [ResumeScalarFieldEnum!]!
    having: ResumeScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ResumeGroupBy!]!
  aggregateResumeSavedByEmployer(
    where: ResumeSavedByEmployerWhereInput
    orderBy: [ResumeSavedByEmployerOrderByWithRelationInput!]
    cursor: ResumeSavedByEmployerWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateResumeSavedByEmployer!
  findFirstResumeSavedByEmployer(
    where: ResumeSavedByEmployerWhereInput
    orderBy: [ResumeSavedByEmployerOrderByWithRelationInput!]
    cursor: ResumeSavedByEmployerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ResumeSavedByEmployerScalarFieldEnum!]
  ): ResumeSavedByEmployer
  resumeSavedByEmployers(
    where: ResumeSavedByEmployerWhereInput
    orderBy: [ResumeSavedByEmployerOrderByWithRelationInput!]
    cursor: ResumeSavedByEmployerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ResumeSavedByEmployerScalarFieldEnum!]
  ): [ResumeSavedByEmployer!]!
  resumeSavedByEmployer(where: ResumeSavedByEmployerWhereUniqueInput!): ResumeSavedByEmployer
  groupByResumeSavedByEmployer(
    where: ResumeSavedByEmployerWhereInput
    orderBy: [ResumeSavedByEmployerOrderByWithAggregationInput!]
    by: [ResumeSavedByEmployerScalarFieldEnum!]!
    having: ResumeSavedByEmployerScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ResumeSavedByEmployerGroupBy!]!
  aggregateUser(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateUser!
  findFirstUser(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserScalarFieldEnum!]
  ): User
  users(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserScalarFieldEnum!]
  ): [User!]!
  user(where: UserWhereUniqueInput!): User
  groupByUser(
    where: UserWhereInput
    orderBy: [UserOrderByWithAggregationInput!]
    by: [UserScalarFieldEnum!]!
    having: UserScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [UserGroupBy!]!
  aggregateVacancy(
    where: VacancyWhereInput
    orderBy: [VacancyOrderByWithRelationInput!]
    cursor: VacancyWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateVacancy!
  findFirstVacancy(
    where: VacancyWhereInput
    orderBy: [VacancyOrderByWithRelationInput!]
    cursor: VacancyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [VacancyScalarFieldEnum!]
  ): Vacancy
  vacancies(
    where: VacancyWhereInput
    orderBy: [VacancyOrderByWithRelationInput!]
    cursor: VacancyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [VacancyScalarFieldEnum!]
  ): [Vacancy!]!
  vacancy(where: VacancyWhereUniqueInput!): Vacancy
  groupByVacancy(
    where: VacancyWhereInput
    orderBy: [VacancyOrderByWithAggregationInput!]
    by: [VacancyScalarFieldEnum!]!
    having: VacancyScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [VacancyGroupBy!]!
  aggregateVacancySavedByApplicant(
    where: VacancySavedByApplicantWhereInput
    orderBy: [VacancySavedByApplicantOrderByWithRelationInput!]
    cursor: VacancySavedByApplicantWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateVacancySavedByApplicant!
  findFirstVacancySavedByApplicant(
    where: VacancySavedByApplicantWhereInput
    orderBy: [VacancySavedByApplicantOrderByWithRelationInput!]
    cursor: VacancySavedByApplicantWhereUniqueInput
    take: Int
    skip: Int
    distinct: [VacancySavedByApplicantScalarFieldEnum!]
  ): VacancySavedByApplicant
  vacancySavedByApplicants(
    where: VacancySavedByApplicantWhereInput
    orderBy: [VacancySavedByApplicantOrderByWithRelationInput!]
    cursor: VacancySavedByApplicantWhereUniqueInput
    take: Int
    skip: Int
    distinct: [VacancySavedByApplicantScalarFieldEnum!]
  ): [VacancySavedByApplicant!]!
  vacancySavedByApplicant(where: VacancySavedByApplicantWhereUniqueInput!): VacancySavedByApplicant
  groupByVacancySavedByApplicant(
    where: VacancySavedByApplicantWhereInput
    orderBy: [VacancySavedByApplicantOrderByWithAggregationInput!]
    by: [VacancySavedByApplicantScalarFieldEnum!]!
    having: VacancySavedByApplicantScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [VacancySavedByApplicantGroupBy!]!
  checkIsAuthenticated: CheckAuthenticatedOutput!
}

type AggregateAdmin {
  _count: AdminCountAggregate
  _min: AdminMinAggregate
  _max: AdminMaxAggregate
}

type AdminCountAggregate {
  id: Int!
  login: Int!
  password: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type AdminMinAggregate {
  id: String
  login: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type AdminMaxAggregate {
  id: String
  login: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: StringFilter
  login: StringFilter
  password: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input AdminOrderByWithRelationInput {
  id: SortOrder
  login: SortOrder
  password: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum SortOrder {
  asc
  desc
}

input AdminWhereUniqueInput {
  id: String
  login: String
}

type Admin {
  id: String!
  login: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AdminScalarFieldEnum {
  id
  login
  password
  createdAt
  updatedAt
}

type AdminGroupBy {
  id: String!
  login: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: AdminCountAggregate
  _min: AdminMinAggregate
  _max: AdminMaxAggregate
}

input AdminOrderByWithAggregationInput {
  id: SortOrder
  login: SortOrder
  password: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: AdminCountOrderByAggregateInput
  _max: AdminMaxOrderByAggregateInput
  _min: AdminMinOrderByAggregateInput
}

input AdminCountOrderByAggregateInput {
  id: SortOrder
  login: SortOrder
  password: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AdminMaxOrderByAggregateInput {
  id: SortOrder
  login: SortOrder
  password: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AdminMinOrderByAggregateInput {
  id: SortOrder
  login: SortOrder
  password: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AdminScalarWhereWithAggregatesInput {
  AND: [AdminScalarWhereWithAggregatesInput!]
  OR: [AdminScalarWhereWithAggregatesInput!]
  NOT: [AdminScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  login: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

type AggregateAdminChat {
  _count: AdminChatCountAggregate
  _min: AdminChatMinAggregate
  _max: AdminChatMaxAggregate
}

type AdminChatCountAggregate {
  id: Int!
  userId: Int!
  viewedByUser: Int!
  viewedByAdmin: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type AdminChatMinAggregate {
  id: String
  userId: String
  viewedByUser: Boolean
  viewedByAdmin: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type AdminChatMaxAggregate {
  id: String
  userId: String
  viewedByUser: Boolean
  viewedByAdmin: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input AdminChatWhereInput {
  AND: [AdminChatWhereInput!]
  OR: [AdminChatWhereInput!]
  NOT: [AdminChatWhereInput!]
  id: StringFilter
  user: UserRelationFilter
  userId: StringFilter
  viewedByUser: BoolFilter
  viewedByAdmin: BoolFilter
  messages: AdminChatMessageListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  login: StringFilter
  role: EnumUserRoleFilter
  applicantProfile: ApplicantProfileRelationFilter
  employerProfile: EmployerProfileRelationFilter
  chatWithAdmin: AdminChatRelationFilter
  chatsWithFirstUsers: ChatListRelationFilter
  chatsWithSecondUsers: ChatListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

enum UserRole {
  Applicant
  Employer
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

input ApplicantProfileRelationFilter {
  is: ApplicantProfileWhereInput
  isNot: ApplicantProfileWhereInput
}

input ApplicantProfileWhereInput {
  AND: [ApplicantProfileWhereInput!]
  OR: [ApplicantProfileWhereInput!]
  NOT: [ApplicantProfileWhereInput!]
  id: StringFilter
  resume: ResumeRelationFilter
  savedVacancies: VacancySavedByApplicantListRelationFilter
  user: UserRelationFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ResumeRelationFilter {
  is: ResumeWhereInput
  isNot: ResumeWhereInput
}

input ResumeWhereInput {
  AND: [ResumeWhereInput!]
  OR: [ResumeWhereInput!]
  NOT: [ResumeWhereInput!]
  id: StringFilter
  views: IntFilter
  firstname: StringFilter
  lastname: StringNullableFilter
  phone: StringFilter
  phoneHidden: BoolFilter
  birthday: DateTimeFilter
  placeOfResidence: IntFilter
  desiredPost: StringNullableFilter
  fieldOfActivity: IntFilter
  education: StringNullableFilter
  experience: StringNullableFilter
  aboutMe: StringNullableFilter
  applicantProfile: ApplicantProfileRelationFilter
  applicantProfileId: StringFilter
  savedBy: ResumeSavedByEmployerListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input ResumeSavedByEmployerListRelationFilter {
  every: ResumeSavedByEmployerWhereInput
  some: ResumeSavedByEmployerWhereInput
  none: ResumeSavedByEmployerWhereInput
}

input ResumeSavedByEmployerWhereInput {
  AND: [ResumeSavedByEmployerWhereInput!]
  OR: [ResumeSavedByEmployerWhereInput!]
  NOT: [ResumeSavedByEmployerWhereInput!]
  employerProfile: EmployerProfileRelationFilter
  employerProfileId: StringFilter
  resume: ResumeRelationFilter
  resumeId: StringFilter
  assignedAt: DateTimeFilter
}

input EmployerProfileRelationFilter {
  is: EmployerProfileWhereInput
  isNot: EmployerProfileWhereInput
}

input EmployerProfileWhereInput {
  AND: [EmployerProfileWhereInput!]
  OR: [EmployerProfileWhereInput!]
  NOT: [EmployerProfileWhereInput!]
  id: StringFilter
  companyName: StringFilter
  description: StringFilter
  savedResumes: ResumeSavedByEmployerListRelationFilter
  user: UserRelationFilter
  userId: StringFilter
  vacancies: VacancyListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input VacancyListRelationFilter {
  every: VacancyWhereInput
  some: VacancyWhereInput
  none: VacancyWhereInput
}

input VacancyWhereInput {
  AND: [VacancyWhereInput!]
  OR: [VacancyWhereInput!]
  NOT: [VacancyWhereInput!]
  id: StringFilter
  employer: EmployerProfileRelationFilter
  employerId: StringFilter
  salary: IntFilter
  views: IntFilter
  post: StringFilter
  fieldOfActivity: IntFilter
  placeOfWork: IntFilter
  description: StringFilter
  duties: StringNullableFilter
  requirements: StringNullableFilter
  workingSchedule: StringNullableFilter
  phone: StringFilter
  phoneHidden: BoolFilter
  archived: BoolFilter
  archivedReason: StringNullableFilter
  savedBy: VacancySavedByApplicantListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input VacancySavedByApplicantListRelationFilter {
  every: VacancySavedByApplicantWhereInput
  some: VacancySavedByApplicantWhereInput
  none: VacancySavedByApplicantWhereInput
}

input VacancySavedByApplicantWhereInput {
  AND: [VacancySavedByApplicantWhereInput!]
  OR: [VacancySavedByApplicantWhereInput!]
  NOT: [VacancySavedByApplicantWhereInput!]
  applicantProfile: ApplicantProfileRelationFilter
  applicantProfileId: StringFilter
  vacancy: VacancyRelationFilter
  vacancyId: StringFilter
  assignedAt: DateTimeFilter
}

input VacancyRelationFilter {
  is: VacancyWhereInput
  isNot: VacancyWhereInput
}

input AdminChatRelationFilter {
  is: AdminChatWhereInput
  isNot: AdminChatWhereInput
}

input ChatListRelationFilter {
  every: ChatWhereInput
  some: ChatWhereInput
  none: ChatWhereInput
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
  id: StringFilter
  firstUser: UserRelationFilter
  firstUserId: StringFilter
  secondUser: UserRelationFilter
  secondUserId: StringFilter
  viewedByFirst: BoolFilter
  viewedBySecond: BoolFilter
  messages: ChatMessageListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ChatMessageListRelationFilter {
  every: ChatMessageWhereInput
  some: ChatMessageWhereInput
  none: ChatMessageWhereInput
}

input ChatMessageWhereInput {
  AND: [ChatMessageWhereInput!]
  OR: [ChatMessageWhereInput!]
  NOT: [ChatMessageWhereInput!]
  id: StringFilter
  chat: ChatRelationFilter
  chatId: StringFilter
  message: StringFilter
  createdAt: DateTimeFilter
}

input ChatRelationFilter {
  is: ChatWhereInput
  isNot: ChatWhereInput
}

input AdminChatMessageListRelationFilter {
  every: AdminChatMessageWhereInput
  some: AdminChatMessageWhereInput
  none: AdminChatMessageWhereInput
}

input AdminChatMessageWhereInput {
  AND: [AdminChatMessageWhereInput!]
  OR: [AdminChatMessageWhereInput!]
  NOT: [AdminChatMessageWhereInput!]
  id: StringFilter
  chat: AdminChatRelationFilter
  chatId: StringFilter
  message: StringFilter
  createdAt: DateTimeFilter
}

input AdminChatOrderByWithRelationInput {
  id: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  viewedByUser: SortOrder
  viewedByAdmin: SortOrder
  messages: AdminChatMessageOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  login: SortOrder
  role: SortOrder
  applicantProfile: ApplicantProfileOrderByWithRelationInput
  employerProfile: EmployerProfileOrderByWithRelationInput
  chatWithAdmin: AdminChatOrderByWithRelationInput
  chatsWithFirstUsers: ChatOrderByRelationAggregateInput
  chatsWithSecondUsers: ChatOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ApplicantProfileOrderByWithRelationInput {
  id: SortOrder
  resume: ResumeOrderByWithRelationInput
  savedVacancies: VacancySavedByApplicantOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ResumeOrderByWithRelationInput {
  id: SortOrder
  views: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  phone: SortOrder
  phoneHidden: SortOrder
  birthday: SortOrder
  placeOfResidence: SortOrder
  desiredPost: SortOrder
  fieldOfActivity: SortOrder
  education: SortOrder
  experience: SortOrder
  aboutMe: SortOrder
  applicantProfile: ApplicantProfileOrderByWithRelationInput
  applicantProfileId: SortOrder
  savedBy: ResumeSavedByEmployerOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ResumeSavedByEmployerOrderByRelationAggregateInput {
  _count: SortOrder
}

input VacancySavedByApplicantOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmployerProfileOrderByWithRelationInput {
  id: SortOrder
  companyName: SortOrder
  description: SortOrder
  savedResumes: ResumeSavedByEmployerOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  userId: SortOrder
  vacancies: VacancyOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VacancyOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChatOrderByRelationAggregateInput {
  _count: SortOrder
}

input AdminChatMessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input AdminChatWhereUniqueInput {
  id: String
  userId: String
}

type AdminChat {
  id: String!
  userId: String!
  viewedByUser: Boolean!
  viewedByAdmin: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: AdminChatCount
  user: User!
  messages(
    where: AdminChatMessageWhereInput
    orderBy: [AdminChatMessageOrderByWithRelationInput!]
    cursor: AdminChatMessageWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AdminChatMessageScalarFieldEnum!]
  ): [AdminChatMessage!]!
}

type AdminChatCount {
  messages: Int!
}

type User {
  id: String!
  login: String!
  role: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: UserCount
  applicantProfile: ApplicantProfile
  employerProfile: EmployerProfile
  chatWithAdmin: AdminChat
  chatsWithFirstUsers(
    where: ChatWhereInput
    orderBy: [ChatOrderByWithRelationInput!]
    cursor: ChatWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ChatScalarFieldEnum!]
  ): [Chat!]!
  chatsWithSecondUsers(
    where: ChatWhereInput
    orderBy: [ChatOrderByWithRelationInput!]
    cursor: ChatWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ChatScalarFieldEnum!]
  ): [Chat!]!
}

type UserCount {
  chatsWithFirstUsers: Int!
  chatsWithSecondUsers: Int!
}

type ApplicantProfile {
  id: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ApplicantProfileCount
  resume: Resume
  savedVacancies(
    where: VacancySavedByApplicantWhereInput
    orderBy: [VacancySavedByApplicantOrderByWithRelationInput!]
    cursor: VacancySavedByApplicantWhereUniqueInput
    take: Int
    skip: Int
    distinct: [VacancySavedByApplicantScalarFieldEnum!]
  ): [VacancySavedByApplicant!]!
  user: User!
}

type ApplicantProfileCount {
  savedVacancies: Int!
}

type Resume {
  id: String!
  views: Int!
  firstname: String!
  lastname: String
  phone: String!
  phoneHidden: Boolean!
  birthday: DateTime!
  placeOfResidence: Int!
  desiredPost: String
  fieldOfActivity: Int!
  education: String
  experience: String
  aboutMe: String
  applicantProfileId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ResumeCount
  applicantProfile: ApplicantProfile!
  savedBy(
    where: ResumeSavedByEmployerWhereInput
    orderBy: [ResumeSavedByEmployerOrderByWithRelationInput!]
    cursor: ResumeSavedByEmployerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ResumeSavedByEmployerScalarFieldEnum!]
  ): [ResumeSavedByEmployer!]!
}

type ResumeCount {
  savedBy: Int!
}

type ResumeSavedByEmployer {
  employerProfileId: String!
  resumeId: String!
  assignedAt: DateTime!
  employerProfile: EmployerProfile!
  resume: Resume!
}

type EmployerProfile {
  id: String!
  companyName: String!
  description: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: EmployerProfileCount
  savedResumes(
    where: ResumeSavedByEmployerWhereInput
    orderBy: [ResumeSavedByEmployerOrderByWithRelationInput!]
    cursor: ResumeSavedByEmployerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ResumeSavedByEmployerScalarFieldEnum!]
  ): [ResumeSavedByEmployer!]!
  user: User!
  vacancies(
    where: VacancyWhereInput
    orderBy: [VacancyOrderByWithRelationInput!]
    cursor: VacancyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [VacancyScalarFieldEnum!]
  ): [Vacancy!]!
}

type EmployerProfileCount {
  savedResumes: Int!
  vacancies: Int!
}

input ResumeSavedByEmployerOrderByWithRelationInput {
  employerProfile: EmployerProfileOrderByWithRelationInput
  employerProfileId: SortOrder
  resume: ResumeOrderByWithRelationInput
  resumeId: SortOrder
  assignedAt: SortOrder
}

input ResumeSavedByEmployerWhereUniqueInput {
  employerProfileId_resumeId: ResumeSavedByEmployerEmployerProfileIdResumeIdCompoundUniqueInput
}

input ResumeSavedByEmployerEmployerProfileIdResumeIdCompoundUniqueInput {
  employerProfileId: String!
  resumeId: String!
}

enum ResumeSavedByEmployerScalarFieldEnum {
  employerProfileId
  resumeId
  assignedAt
}

type Vacancy {
  id: String!
  employerId: String!
  salary: Int!
  views: Int!
  post: String!
  fieldOfActivity: Int!
  placeOfWork: Int!
  description: String!
  duties: String
  requirements: String
  workingSchedule: String
  phone: String!
  phoneHidden: Boolean!
  archived: Boolean!
  archivedReason: String
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: VacancyCount
  employer: EmployerProfile!
  savedBy(
    where: VacancySavedByApplicantWhereInput
    orderBy: [VacancySavedByApplicantOrderByWithRelationInput!]
    cursor: VacancySavedByApplicantWhereUniqueInput
    take: Int
    skip: Int
    distinct: [VacancySavedByApplicantScalarFieldEnum!]
  ): [VacancySavedByApplicant!]!
}

type VacancyCount {
  savedBy: Int!
}

type VacancySavedByApplicant {
  applicantProfileId: String!
  vacancyId: String!
  assignedAt: DateTime!
  applicantProfile: ApplicantProfile!
  vacancy: Vacancy!
}

input VacancySavedByApplicantOrderByWithRelationInput {
  applicantProfile: ApplicantProfileOrderByWithRelationInput
  applicantProfileId: SortOrder
  vacancy: VacancyOrderByWithRelationInput
  vacancyId: SortOrder
  assignedAt: SortOrder
}

input VacancyOrderByWithRelationInput {
  id: SortOrder
  employer: EmployerProfileOrderByWithRelationInput
  employerId: SortOrder
  salary: SortOrder
  views: SortOrder
  post: SortOrder
  fieldOfActivity: SortOrder
  placeOfWork: SortOrder
  description: SortOrder
  duties: SortOrder
  requirements: SortOrder
  workingSchedule: SortOrder
  phone: SortOrder
  phoneHidden: SortOrder
  archived: SortOrder
  archivedReason: SortOrder
  savedBy: VacancySavedByApplicantOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VacancySavedByApplicantWhereUniqueInput {
  applicantProfileId_vacancyId: VacancySavedByApplicantApplicantProfileIdVacancyIdCompoundUniqueInput
}

input VacancySavedByApplicantApplicantProfileIdVacancyIdCompoundUniqueInput {
  applicantProfileId: String!
  vacancyId: String!
}

enum VacancySavedByApplicantScalarFieldEnum {
  applicantProfileId
  vacancyId
  assignedAt
}

input VacancyWhereUniqueInput {
  id: String
}

enum VacancyScalarFieldEnum {
  id
  employerId
  salary
  views
  post
  fieldOfActivity
  placeOfWork
  description
  duties
  requirements
  workingSchedule
  phone
  phoneHidden
  archived
  archivedReason
  createdAt
  updatedAt
}

type Chat {
  id: String!
  firstUserId: String!
  secondUserId: String!
  viewedByFirst: Boolean!
  viewedBySecond: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ChatCount
  firstUser: User!
  secondUser: User!
  messages(
    where: ChatMessageWhereInput
    orderBy: [ChatMessageOrderByWithRelationInput!]
    cursor: ChatMessageWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ChatMessageScalarFieldEnum!]
  ): [ChatMessage!]!
}

type ChatCount {
  messages: Int!
}

type ChatMessage {
  id: String!
  chatId: String!
  message: String!
  createdAt: DateTime!
  chat: Chat!
}

input ChatMessageOrderByWithRelationInput {
  id: SortOrder
  chat: ChatOrderByWithRelationInput
  chatId: SortOrder
  message: SortOrder
  createdAt: SortOrder
}

input ChatOrderByWithRelationInput {
  id: SortOrder
  firstUser: UserOrderByWithRelationInput
  firstUserId: SortOrder
  secondUser: UserOrderByWithRelationInput
  secondUserId: SortOrder
  viewedByFirst: SortOrder
  viewedBySecond: SortOrder
  messages: ChatMessageOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ChatMessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChatMessageWhereUniqueInput {
  id: String
}

enum ChatMessageScalarFieldEnum {
  id
  chatId
  message
  createdAt
}

input ChatWhereUniqueInput {
  id: String
}

enum ChatScalarFieldEnum {
  id
  firstUserId
  secondUserId
  viewedByFirst
  viewedBySecond
  createdAt
  updatedAt
}

type AdminChatMessage {
  id: String!
  chatId: String!
  message: String!
  createdAt: DateTime!
  chat: AdminChat!
}

input AdminChatMessageOrderByWithRelationInput {
  id: SortOrder
  chat: AdminChatOrderByWithRelationInput
  chatId: SortOrder
  message: SortOrder
  createdAt: SortOrder
}

input AdminChatMessageWhereUniqueInput {
  id: String
}

enum AdminChatMessageScalarFieldEnum {
  id
  chatId
  message
  createdAt
}

enum AdminChatScalarFieldEnum {
  id
  userId
  viewedByUser
  viewedByAdmin
  createdAt
  updatedAt
}

type AdminChatGroupBy {
  id: String!
  userId: String!
  viewedByUser: Boolean!
  viewedByAdmin: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: AdminChatCountAggregate
  _min: AdminChatMinAggregate
  _max: AdminChatMaxAggregate
}

input AdminChatOrderByWithAggregationInput {
  id: SortOrder
  userId: SortOrder
  viewedByUser: SortOrder
  viewedByAdmin: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: AdminChatCountOrderByAggregateInput
  _max: AdminChatMaxOrderByAggregateInput
  _min: AdminChatMinOrderByAggregateInput
}

input AdminChatCountOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  viewedByUser: SortOrder
  viewedByAdmin: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AdminChatMaxOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  viewedByUser: SortOrder
  viewedByAdmin: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AdminChatMinOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  viewedByUser: SortOrder
  viewedByAdmin: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AdminChatScalarWhereWithAggregatesInput {
  AND: [AdminChatScalarWhereWithAggregatesInput!]
  OR: [AdminChatScalarWhereWithAggregatesInput!]
  NOT: [AdminChatScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
  viewedByUser: BoolWithAggregatesFilter
  viewedByAdmin: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input BoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

type AggregateAdminChatMessage {
  _count: AdminChatMessageCountAggregate
  _min: AdminChatMessageMinAggregate
  _max: AdminChatMessageMaxAggregate
}

type AdminChatMessageCountAggregate {
  id: Int!
  chatId: Int!
  message: Int!
  createdAt: Int!
  _all: Int!
}

type AdminChatMessageMinAggregate {
  id: String
  chatId: String
  message: String
  createdAt: DateTime
}

type AdminChatMessageMaxAggregate {
  id: String
  chatId: String
  message: String
  createdAt: DateTime
}

type AdminChatMessageGroupBy {
  id: String!
  chatId: String!
  message: String!
  createdAt: DateTime!
  _count: AdminChatMessageCountAggregate
  _min: AdminChatMessageMinAggregate
  _max: AdminChatMessageMaxAggregate
}

input AdminChatMessageOrderByWithAggregationInput {
  id: SortOrder
  chatId: SortOrder
  message: SortOrder
  createdAt: SortOrder
  _count: AdminChatMessageCountOrderByAggregateInput
  _max: AdminChatMessageMaxOrderByAggregateInput
  _min: AdminChatMessageMinOrderByAggregateInput
}

input AdminChatMessageCountOrderByAggregateInput {
  id: SortOrder
  chatId: SortOrder
  message: SortOrder
  createdAt: SortOrder
}

input AdminChatMessageMaxOrderByAggregateInput {
  id: SortOrder
  chatId: SortOrder
  message: SortOrder
  createdAt: SortOrder
}

input AdminChatMessageMinOrderByAggregateInput {
  id: SortOrder
  chatId: SortOrder
  message: SortOrder
  createdAt: SortOrder
}

input AdminChatMessageScalarWhereWithAggregatesInput {
  AND: [AdminChatMessageScalarWhereWithAggregatesInput!]
  OR: [AdminChatMessageScalarWhereWithAggregatesInput!]
  NOT: [AdminChatMessageScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  chatId: StringWithAggregatesFilter
  message: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

type AggregateApplicantProfile {
  _count: ApplicantProfileCountAggregate
  _min: ApplicantProfileMinAggregate
  _max: ApplicantProfileMaxAggregate
}

type ApplicantProfileCountAggregate {
  id: Int!
  userId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ApplicantProfileMinAggregate {
  id: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ApplicantProfileMaxAggregate {
  id: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ApplicantProfileWhereUniqueInput {
  id: String
  userId: String
}

enum ApplicantProfileScalarFieldEnum {
  id
  userId
  createdAt
  updatedAt
}

type ApplicantProfileGroupBy {
  id: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ApplicantProfileCountAggregate
  _min: ApplicantProfileMinAggregate
  _max: ApplicantProfileMaxAggregate
}

input ApplicantProfileOrderByWithAggregationInput {
  id: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ApplicantProfileCountOrderByAggregateInput
  _max: ApplicantProfileMaxOrderByAggregateInput
  _min: ApplicantProfileMinOrderByAggregateInput
}

input ApplicantProfileCountOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ApplicantProfileMaxOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ApplicantProfileMinOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ApplicantProfileScalarWhereWithAggregatesInput {
  AND: [ApplicantProfileScalarWhereWithAggregatesInput!]
  OR: [ApplicantProfileScalarWhereWithAggregatesInput!]
  NOT: [ApplicantProfileScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AggregateApplication {
  _count: ApplicationCountAggregate
  _min: ApplicationMinAggregate
  _max: ApplicationMaxAggregate
}

type ApplicationCountAggregate {
  id: Int!
  type: Int!
  addition: Int!
  createdAt: Int!
  _all: Int!
}

type ApplicationMinAggregate {
  id: String
  type: ApplicationType
  createdAt: DateTime
}

enum ApplicationType {
  findApplicant
  helpToMakeResume
}

type ApplicationMaxAggregate {
  id: String
  type: ApplicationType
  createdAt: DateTime
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  id: StringFilter
  type: EnumApplicationTypeFilter
  addition: JsonFilter
  createdAt: DateTimeFilter
}

input EnumApplicationTypeFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  notIn: [ApplicationType!]
  not: NestedEnumApplicationTypeFilter
}

input NestedEnumApplicationTypeFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  notIn: [ApplicationType!]
  not: NestedEnumApplicationTypeFilter
}

input JsonFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input ApplicationOrderByWithRelationInput {
  id: SortOrder
  type: SortOrder
  addition: SortOrder
  createdAt: SortOrder
}

input ApplicationWhereUniqueInput {
  id: String
}

type Application {
  id: String!
  type: ApplicationType!
  addition: JSON!
  createdAt: DateTime!
}

enum ApplicationScalarFieldEnum {
  id
  type
  addition
  createdAt
}

type ApplicationGroupBy {
  id: String!
  type: ApplicationType!
  addition: JSON!
  createdAt: DateTime!
  _count: ApplicationCountAggregate
  _min: ApplicationMinAggregate
  _max: ApplicationMaxAggregate
}

input ApplicationOrderByWithAggregationInput {
  id: SortOrder
  type: SortOrder
  addition: SortOrder
  createdAt: SortOrder
  _count: ApplicationCountOrderByAggregateInput
  _max: ApplicationMaxOrderByAggregateInput
  _min: ApplicationMinOrderByAggregateInput
}

input ApplicationCountOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  addition: SortOrder
  createdAt: SortOrder
}

input ApplicationMaxOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  createdAt: SortOrder
}

input ApplicationMinOrderByAggregateInput {
  id: SortOrder
  type: SortOrder
  createdAt: SortOrder
}

input ApplicationScalarWhereWithAggregatesInput {
  AND: [ApplicationScalarWhereWithAggregatesInput!]
  OR: [ApplicationScalarWhereWithAggregatesInput!]
  NOT: [ApplicationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  type: EnumApplicationTypeWithAggregatesFilter
  addition: JsonWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

input EnumApplicationTypeWithAggregatesFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  notIn: [ApplicationType!]
  not: NestedEnumApplicationTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumApplicationTypeFilter
  _max: NestedEnumApplicationTypeFilter
}

input NestedEnumApplicationTypeWithAggregatesFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  notIn: [ApplicationType!]
  not: NestedEnumApplicationTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumApplicationTypeFilter
  _max: NestedEnumApplicationTypeFilter
}

input JsonWithAggregatesFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
  _count: NestedIntFilter
  _min: NestedJsonFilter
  _max: NestedJsonFilter
}

input NestedJsonFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

type AggregateChat {
  _count: ChatCountAggregate
  _min: ChatMinAggregate
  _max: ChatMaxAggregate
}

type ChatCountAggregate {
  id: Int!
  firstUserId: Int!
  secondUserId: Int!
  viewedByFirst: Int!
  viewedBySecond: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ChatMinAggregate {
  id: String
  firstUserId: String
  secondUserId: String
  viewedByFirst: Boolean
  viewedBySecond: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type ChatMaxAggregate {
  id: String
  firstUserId: String
  secondUserId: String
  viewedByFirst: Boolean
  viewedBySecond: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type ChatGroupBy {
  id: String!
  firstUserId: String!
  secondUserId: String!
  viewedByFirst: Boolean!
  viewedBySecond: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ChatCountAggregate
  _min: ChatMinAggregate
  _max: ChatMaxAggregate
}

input ChatOrderByWithAggregationInput {
  id: SortOrder
  firstUserId: SortOrder
  secondUserId: SortOrder
  viewedByFirst: SortOrder
  viewedBySecond: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ChatCountOrderByAggregateInput
  _max: ChatMaxOrderByAggregateInput
  _min: ChatMinOrderByAggregateInput
}

input ChatCountOrderByAggregateInput {
  id: SortOrder
  firstUserId: SortOrder
  secondUserId: SortOrder
  viewedByFirst: SortOrder
  viewedBySecond: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ChatMaxOrderByAggregateInput {
  id: SortOrder
  firstUserId: SortOrder
  secondUserId: SortOrder
  viewedByFirst: SortOrder
  viewedBySecond: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ChatMinOrderByAggregateInput {
  id: SortOrder
  firstUserId: SortOrder
  secondUserId: SortOrder
  viewedByFirst: SortOrder
  viewedBySecond: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ChatScalarWhereWithAggregatesInput {
  AND: [ChatScalarWhereWithAggregatesInput!]
  OR: [ChatScalarWhereWithAggregatesInput!]
  NOT: [ChatScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  firstUserId: StringWithAggregatesFilter
  secondUserId: StringWithAggregatesFilter
  viewedByFirst: BoolWithAggregatesFilter
  viewedBySecond: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AggregateChatMessage {
  _count: ChatMessageCountAggregate
  _min: ChatMessageMinAggregate
  _max: ChatMessageMaxAggregate
}

type ChatMessageCountAggregate {
  id: Int!
  chatId: Int!
  message: Int!
  createdAt: Int!
  _all: Int!
}

type ChatMessageMinAggregate {
  id: String
  chatId: String
  message: String
  createdAt: DateTime
}

type ChatMessageMaxAggregate {
  id: String
  chatId: String
  message: String
  createdAt: DateTime
}

type ChatMessageGroupBy {
  id: String!
  chatId: String!
  message: String!
  createdAt: DateTime!
  _count: ChatMessageCountAggregate
  _min: ChatMessageMinAggregate
  _max: ChatMessageMaxAggregate
}

input ChatMessageOrderByWithAggregationInput {
  id: SortOrder
  chatId: SortOrder
  message: SortOrder
  createdAt: SortOrder
  _count: ChatMessageCountOrderByAggregateInput
  _max: ChatMessageMaxOrderByAggregateInput
  _min: ChatMessageMinOrderByAggregateInput
}

input ChatMessageCountOrderByAggregateInput {
  id: SortOrder
  chatId: SortOrder
  message: SortOrder
  createdAt: SortOrder
}

input ChatMessageMaxOrderByAggregateInput {
  id: SortOrder
  chatId: SortOrder
  message: SortOrder
  createdAt: SortOrder
}

input ChatMessageMinOrderByAggregateInput {
  id: SortOrder
  chatId: SortOrder
  message: SortOrder
  createdAt: SortOrder
}

input ChatMessageScalarWhereWithAggregatesInput {
  AND: [ChatMessageScalarWhereWithAggregatesInput!]
  OR: [ChatMessageScalarWhereWithAggregatesInput!]
  NOT: [ChatMessageScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  chatId: StringWithAggregatesFilter
  message: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

type AggregateEmployerProfile {
  _count: EmployerProfileCountAggregate
  _min: EmployerProfileMinAggregate
  _max: EmployerProfileMaxAggregate
}

type EmployerProfileCountAggregate {
  id: Int!
  companyName: Int!
  description: Int!
  userId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type EmployerProfileMinAggregate {
  id: String
  companyName: String
  description: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type EmployerProfileMaxAggregate {
  id: String
  companyName: String
  description: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input EmployerProfileWhereUniqueInput {
  id: String
  userId: String
}

enum EmployerProfileScalarFieldEnum {
  id
  companyName
  description
  userId
  createdAt
  updatedAt
}

type EmployerProfileGroupBy {
  id: String!
  companyName: String!
  description: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: EmployerProfileCountAggregate
  _min: EmployerProfileMinAggregate
  _max: EmployerProfileMaxAggregate
}

input EmployerProfileOrderByWithAggregationInput {
  id: SortOrder
  companyName: SortOrder
  description: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: EmployerProfileCountOrderByAggregateInput
  _max: EmployerProfileMaxOrderByAggregateInput
  _min: EmployerProfileMinOrderByAggregateInput
}

input EmployerProfileCountOrderByAggregateInput {
  id: SortOrder
  companyName: SortOrder
  description: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input EmployerProfileMaxOrderByAggregateInput {
  id: SortOrder
  companyName: SortOrder
  description: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input EmployerProfileMinOrderByAggregateInput {
  id: SortOrder
  companyName: SortOrder
  description: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input EmployerProfileScalarWhereWithAggregatesInput {
  AND: [EmployerProfileScalarWhereWithAggregatesInput!]
  OR: [EmployerProfileScalarWhereWithAggregatesInput!]
  NOT: [EmployerProfileScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  companyName: StringWithAggregatesFilter
  description: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AggregateResume {
  _count: ResumeCountAggregate
  _avg: ResumeAvgAggregate
  _sum: ResumeSumAggregate
  _min: ResumeMinAggregate
  _max: ResumeMaxAggregate
}

type ResumeCountAggregate {
  id: Int!
  views: Int!
  firstname: Int!
  lastname: Int!
  phone: Int!
  phoneHidden: Int!
  birthday: Int!
  placeOfResidence: Int!
  desiredPost: Int!
  fieldOfActivity: Int!
  education: Int!
  experience: Int!
  aboutMe: Int!
  applicantProfileId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ResumeAvgAggregate {
  views: Float
  placeOfResidence: Float
  fieldOfActivity: Float
}

type ResumeSumAggregate {
  views: Int
  placeOfResidence: Int
  fieldOfActivity: Int
}

type ResumeMinAggregate {
  id: String
  views: Int
  firstname: String
  lastname: String
  phone: String
  phoneHidden: Boolean
  birthday: DateTime
  placeOfResidence: Int
  desiredPost: String
  fieldOfActivity: Int
  education: String
  experience: String
  aboutMe: String
  applicantProfileId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ResumeMaxAggregate {
  id: String
  views: Int
  firstname: String
  lastname: String
  phone: String
  phoneHidden: Boolean
  birthday: DateTime
  placeOfResidence: Int
  desiredPost: String
  fieldOfActivity: Int
  education: String
  experience: String
  aboutMe: String
  applicantProfileId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ResumeWhereUniqueInput {
  id: String
  applicantProfileId: String
}

enum ResumeScalarFieldEnum {
  id
  views
  firstname
  lastname
  phone
  phoneHidden
  birthday
  placeOfResidence
  desiredPost
  fieldOfActivity
  education
  experience
  aboutMe
  applicantProfileId
  createdAt
  updatedAt
}

type ResumeGroupBy {
  id: String!
  views: Int!
  firstname: String!
  lastname: String
  phone: String!
  phoneHidden: Boolean!
  birthday: DateTime!
  placeOfResidence: Int!
  desiredPost: String
  fieldOfActivity: Int!
  education: String
  experience: String
  aboutMe: String
  applicantProfileId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ResumeCountAggregate
  _avg: ResumeAvgAggregate
  _sum: ResumeSumAggregate
  _min: ResumeMinAggregate
  _max: ResumeMaxAggregate
}

input ResumeOrderByWithAggregationInput {
  id: SortOrder
  views: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  phone: SortOrder
  phoneHidden: SortOrder
  birthday: SortOrder
  placeOfResidence: SortOrder
  desiredPost: SortOrder
  fieldOfActivity: SortOrder
  education: SortOrder
  experience: SortOrder
  aboutMe: SortOrder
  applicantProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ResumeCountOrderByAggregateInput
  _avg: ResumeAvgOrderByAggregateInput
  _max: ResumeMaxOrderByAggregateInput
  _min: ResumeMinOrderByAggregateInput
  _sum: ResumeSumOrderByAggregateInput
}

input ResumeCountOrderByAggregateInput {
  id: SortOrder
  views: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  phone: SortOrder
  phoneHidden: SortOrder
  birthday: SortOrder
  placeOfResidence: SortOrder
  desiredPost: SortOrder
  fieldOfActivity: SortOrder
  education: SortOrder
  experience: SortOrder
  aboutMe: SortOrder
  applicantProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ResumeAvgOrderByAggregateInput {
  views: SortOrder
  placeOfResidence: SortOrder
  fieldOfActivity: SortOrder
}

input ResumeMaxOrderByAggregateInput {
  id: SortOrder
  views: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  phone: SortOrder
  phoneHidden: SortOrder
  birthday: SortOrder
  placeOfResidence: SortOrder
  desiredPost: SortOrder
  fieldOfActivity: SortOrder
  education: SortOrder
  experience: SortOrder
  aboutMe: SortOrder
  applicantProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ResumeMinOrderByAggregateInput {
  id: SortOrder
  views: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  phone: SortOrder
  phoneHidden: SortOrder
  birthday: SortOrder
  placeOfResidence: SortOrder
  desiredPost: SortOrder
  fieldOfActivity: SortOrder
  education: SortOrder
  experience: SortOrder
  aboutMe: SortOrder
  applicantProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ResumeSumOrderByAggregateInput {
  views: SortOrder
  placeOfResidence: SortOrder
  fieldOfActivity: SortOrder
}

input ResumeScalarWhereWithAggregatesInput {
  AND: [ResumeScalarWhereWithAggregatesInput!]
  OR: [ResumeScalarWhereWithAggregatesInput!]
  NOT: [ResumeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  views: IntWithAggregatesFilter
  firstname: StringWithAggregatesFilter
  lastname: StringNullableWithAggregatesFilter
  phone: StringWithAggregatesFilter
  phoneHidden: BoolWithAggregatesFilter
  birthday: DateTimeWithAggregatesFilter
  placeOfResidence: IntWithAggregatesFilter
  desiredPost: StringNullableWithAggregatesFilter
  fieldOfActivity: IntWithAggregatesFilter
  education: StringNullableWithAggregatesFilter
  experience: StringNullableWithAggregatesFilter
  aboutMe: StringNullableWithAggregatesFilter
  applicantProfileId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input IntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedIntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input StringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

type AggregateResumeSavedByEmployer {
  _count: ResumeSavedByEmployerCountAggregate
  _min: ResumeSavedByEmployerMinAggregate
  _max: ResumeSavedByEmployerMaxAggregate
}

type ResumeSavedByEmployerCountAggregate {
  employerProfileId: Int!
  resumeId: Int!
  assignedAt: Int!
  _all: Int!
}

type ResumeSavedByEmployerMinAggregate {
  employerProfileId: String
  resumeId: String
  assignedAt: DateTime
}

type ResumeSavedByEmployerMaxAggregate {
  employerProfileId: String
  resumeId: String
  assignedAt: DateTime
}

type ResumeSavedByEmployerGroupBy {
  employerProfileId: String!
  resumeId: String!
  assignedAt: DateTime!
  _count: ResumeSavedByEmployerCountAggregate
  _min: ResumeSavedByEmployerMinAggregate
  _max: ResumeSavedByEmployerMaxAggregate
}

input ResumeSavedByEmployerOrderByWithAggregationInput {
  employerProfileId: SortOrder
  resumeId: SortOrder
  assignedAt: SortOrder
  _count: ResumeSavedByEmployerCountOrderByAggregateInput
  _max: ResumeSavedByEmployerMaxOrderByAggregateInput
  _min: ResumeSavedByEmployerMinOrderByAggregateInput
}

input ResumeSavedByEmployerCountOrderByAggregateInput {
  employerProfileId: SortOrder
  resumeId: SortOrder
  assignedAt: SortOrder
}

input ResumeSavedByEmployerMaxOrderByAggregateInput {
  employerProfileId: SortOrder
  resumeId: SortOrder
  assignedAt: SortOrder
}

input ResumeSavedByEmployerMinOrderByAggregateInput {
  employerProfileId: SortOrder
  resumeId: SortOrder
  assignedAt: SortOrder
}

input ResumeSavedByEmployerScalarWhereWithAggregatesInput {
  AND: [ResumeSavedByEmployerScalarWhereWithAggregatesInput!]
  OR: [ResumeSavedByEmployerScalarWhereWithAggregatesInput!]
  NOT: [ResumeSavedByEmployerScalarWhereWithAggregatesInput!]
  employerProfileId: StringWithAggregatesFilter
  resumeId: StringWithAggregatesFilter
  assignedAt: DateTimeWithAggregatesFilter
}

type AggregateUser {
  _count: UserCountAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type UserCountAggregate {
  id: Int!
  login: Int!
  role: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  login: String
  role: UserRole
  createdAt: DateTime
  updatedAt: DateTime
}

type UserMaxAggregate {
  id: String
  login: String
  role: UserRole
  createdAt: DateTime
  updatedAt: DateTime
}

input UserWhereUniqueInput {
  id: String
  login: String
}

enum UserScalarFieldEnum {
  id
  login
  role
  createdAt
  updatedAt
}

type UserGroupBy {
  id: String!
  login: String!
  role: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: UserCountAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

input UserOrderByWithAggregationInput {
  id: SortOrder
  login: SortOrder
  role: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  login: SortOrder
  role: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  login: SortOrder
  role: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  login: SortOrder
  role: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  login: StringWithAggregatesFilter
  role: EnumUserRoleWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input EnumUserRoleWithAggregatesFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumUserRoleFilter
  _max: NestedEnumUserRoleFilter
}

input NestedEnumUserRoleWithAggregatesFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumUserRoleFilter
  _max: NestedEnumUserRoleFilter
}

type AggregateVacancy {
  _count: VacancyCountAggregate
  _avg: VacancyAvgAggregate
  _sum: VacancySumAggregate
  _min: VacancyMinAggregate
  _max: VacancyMaxAggregate
}

type VacancyCountAggregate {
  id: Int!
  employerId: Int!
  salary: Int!
  views: Int!
  post: Int!
  fieldOfActivity: Int!
  placeOfWork: Int!
  description: Int!
  duties: Int!
  requirements: Int!
  workingSchedule: Int!
  phone: Int!
  phoneHidden: Int!
  archived: Int!
  archivedReason: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type VacancyAvgAggregate {
  salary: Float
  views: Float
  fieldOfActivity: Float
  placeOfWork: Float
}

type VacancySumAggregate {
  salary: Int
  views: Int
  fieldOfActivity: Int
  placeOfWork: Int
}

type VacancyMinAggregate {
  id: String
  employerId: String
  salary: Int
  views: Int
  post: String
  fieldOfActivity: Int
  placeOfWork: Int
  description: String
  duties: String
  requirements: String
  workingSchedule: String
  phone: String
  phoneHidden: Boolean
  archived: Boolean
  archivedReason: String
  createdAt: DateTime
  updatedAt: DateTime
}

type VacancyMaxAggregate {
  id: String
  employerId: String
  salary: Int
  views: Int
  post: String
  fieldOfActivity: Int
  placeOfWork: Int
  description: String
  duties: String
  requirements: String
  workingSchedule: String
  phone: String
  phoneHidden: Boolean
  archived: Boolean
  archivedReason: String
  createdAt: DateTime
  updatedAt: DateTime
}

type VacancyGroupBy {
  id: String!
  employerId: String!
  salary: Int!
  views: Int!
  post: String!
  fieldOfActivity: Int!
  placeOfWork: Int!
  description: String!
  duties: String
  requirements: String
  workingSchedule: String
  phone: String!
  phoneHidden: Boolean!
  archived: Boolean!
  archivedReason: String
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: VacancyCountAggregate
  _avg: VacancyAvgAggregate
  _sum: VacancySumAggregate
  _min: VacancyMinAggregate
  _max: VacancyMaxAggregate
}

input VacancyOrderByWithAggregationInput {
  id: SortOrder
  employerId: SortOrder
  salary: SortOrder
  views: SortOrder
  post: SortOrder
  fieldOfActivity: SortOrder
  placeOfWork: SortOrder
  description: SortOrder
  duties: SortOrder
  requirements: SortOrder
  workingSchedule: SortOrder
  phone: SortOrder
  phoneHidden: SortOrder
  archived: SortOrder
  archivedReason: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: VacancyCountOrderByAggregateInput
  _avg: VacancyAvgOrderByAggregateInput
  _max: VacancyMaxOrderByAggregateInput
  _min: VacancyMinOrderByAggregateInput
  _sum: VacancySumOrderByAggregateInput
}

input VacancyCountOrderByAggregateInput {
  id: SortOrder
  employerId: SortOrder
  salary: SortOrder
  views: SortOrder
  post: SortOrder
  fieldOfActivity: SortOrder
  placeOfWork: SortOrder
  description: SortOrder
  duties: SortOrder
  requirements: SortOrder
  workingSchedule: SortOrder
  phone: SortOrder
  phoneHidden: SortOrder
  archived: SortOrder
  archivedReason: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VacancyAvgOrderByAggregateInput {
  salary: SortOrder
  views: SortOrder
  fieldOfActivity: SortOrder
  placeOfWork: SortOrder
}

input VacancyMaxOrderByAggregateInput {
  id: SortOrder
  employerId: SortOrder
  salary: SortOrder
  views: SortOrder
  post: SortOrder
  fieldOfActivity: SortOrder
  placeOfWork: SortOrder
  description: SortOrder
  duties: SortOrder
  requirements: SortOrder
  workingSchedule: SortOrder
  phone: SortOrder
  phoneHidden: SortOrder
  archived: SortOrder
  archivedReason: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VacancyMinOrderByAggregateInput {
  id: SortOrder
  employerId: SortOrder
  salary: SortOrder
  views: SortOrder
  post: SortOrder
  fieldOfActivity: SortOrder
  placeOfWork: SortOrder
  description: SortOrder
  duties: SortOrder
  requirements: SortOrder
  workingSchedule: SortOrder
  phone: SortOrder
  phoneHidden: SortOrder
  archived: SortOrder
  archivedReason: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VacancySumOrderByAggregateInput {
  salary: SortOrder
  views: SortOrder
  fieldOfActivity: SortOrder
  placeOfWork: SortOrder
}

input VacancyScalarWhereWithAggregatesInput {
  AND: [VacancyScalarWhereWithAggregatesInput!]
  OR: [VacancyScalarWhereWithAggregatesInput!]
  NOT: [VacancyScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  employerId: StringWithAggregatesFilter
  salary: IntWithAggregatesFilter
  views: IntWithAggregatesFilter
  post: StringWithAggregatesFilter
  fieldOfActivity: IntWithAggregatesFilter
  placeOfWork: IntWithAggregatesFilter
  description: StringWithAggregatesFilter
  duties: StringNullableWithAggregatesFilter
  requirements: StringNullableWithAggregatesFilter
  workingSchedule: StringNullableWithAggregatesFilter
  phone: StringWithAggregatesFilter
  phoneHidden: BoolWithAggregatesFilter
  archived: BoolWithAggregatesFilter
  archivedReason: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AggregateVacancySavedByApplicant {
  _count: VacancySavedByApplicantCountAggregate
  _min: VacancySavedByApplicantMinAggregate
  _max: VacancySavedByApplicantMaxAggregate
}

type VacancySavedByApplicantCountAggregate {
  applicantProfileId: Int!
  vacancyId: Int!
  assignedAt: Int!
  _all: Int!
}

type VacancySavedByApplicantMinAggregate {
  applicantProfileId: String
  vacancyId: String
  assignedAt: DateTime
}

type VacancySavedByApplicantMaxAggregate {
  applicantProfileId: String
  vacancyId: String
  assignedAt: DateTime
}

type VacancySavedByApplicantGroupBy {
  applicantProfileId: String!
  vacancyId: String!
  assignedAt: DateTime!
  _count: VacancySavedByApplicantCountAggregate
  _min: VacancySavedByApplicantMinAggregate
  _max: VacancySavedByApplicantMaxAggregate
}

input VacancySavedByApplicantOrderByWithAggregationInput {
  applicantProfileId: SortOrder
  vacancyId: SortOrder
  assignedAt: SortOrder
  _count: VacancySavedByApplicantCountOrderByAggregateInput
  _max: VacancySavedByApplicantMaxOrderByAggregateInput
  _min: VacancySavedByApplicantMinOrderByAggregateInput
}

input VacancySavedByApplicantCountOrderByAggregateInput {
  applicantProfileId: SortOrder
  vacancyId: SortOrder
  assignedAt: SortOrder
}

input VacancySavedByApplicantMaxOrderByAggregateInput {
  applicantProfileId: SortOrder
  vacancyId: SortOrder
  assignedAt: SortOrder
}

input VacancySavedByApplicantMinOrderByAggregateInput {
  applicantProfileId: SortOrder
  vacancyId: SortOrder
  assignedAt: SortOrder
}

input VacancySavedByApplicantScalarWhereWithAggregatesInput {
  AND: [VacancySavedByApplicantScalarWhereWithAggregatesInput!]
  OR: [VacancySavedByApplicantScalarWhereWithAggregatesInput!]
  NOT: [VacancySavedByApplicantScalarWhereWithAggregatesInput!]
  applicantProfileId: StringWithAggregatesFilter
  vacancyId: StringWithAggregatesFilter
  assignedAt: DateTimeWithAggregatesFilter
}

type CheckAuthenticatedOutput {
  authenticated: Boolean!
  accessToken: String
}

type Mutation {
  createManyAdmin(data: [AdminCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAdmin(data: AdminCreateInput!): Admin!
  deleteManyAdmin(where: AdminWhereInput): AffectedRowsOutput!
  deleteOneAdmin(where: AdminWhereUniqueInput!): Admin
  updateManyAdmin(data: AdminUpdateManyMutationInput!, where: AdminWhereInput): AffectedRowsOutput!
  updateOneAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  upsertOneAdmin(where: AdminWhereUniqueInput!, create: AdminCreateInput!, update: AdminUpdateInput!): Admin!
  createManyAdminChat(data: [AdminChatCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAdminChat(data: AdminChatCreateInput!): AdminChat!
  deleteManyAdminChat(where: AdminChatWhereInput): AffectedRowsOutput!
  deleteOneAdminChat(where: AdminChatWhereUniqueInput!): AdminChat
  updateManyAdminChat(data: AdminChatUpdateManyMutationInput!, where: AdminChatWhereInput): AffectedRowsOutput!
  updateOneAdminChat(data: AdminChatUpdateInput!, where: AdminChatWhereUniqueInput!): AdminChat
  upsertOneAdminChat(where: AdminChatWhereUniqueInput!, create: AdminChatCreateInput!, update: AdminChatUpdateInput!): AdminChat!
  createManyAdminChatMessage(data: [AdminChatMessageCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAdminChatMessage(data: AdminChatMessageCreateInput!): AdminChatMessage!
  deleteManyAdminChatMessage(where: AdminChatMessageWhereInput): AffectedRowsOutput!
  deleteOneAdminChatMessage(where: AdminChatMessageWhereUniqueInput!): AdminChatMessage
  updateManyAdminChatMessage(data: AdminChatMessageUpdateManyMutationInput!, where: AdminChatMessageWhereInput): AffectedRowsOutput!
  updateOneAdminChatMessage(data: AdminChatMessageUpdateInput!, where: AdminChatMessageWhereUniqueInput!): AdminChatMessage
  upsertOneAdminChatMessage(
    where: AdminChatMessageWhereUniqueInput!
    create: AdminChatMessageCreateInput!
    update: AdminChatMessageUpdateInput!
  ): AdminChatMessage!
  createManyApplicantProfile(data: [ApplicantProfileCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneApplicantProfile(data: ApplicantProfileCreateInput!): ApplicantProfile!
  deleteManyApplicantProfile(where: ApplicantProfileWhereInput): AffectedRowsOutput!
  deleteOneApplicantProfile(where: ApplicantProfileWhereUniqueInput!): ApplicantProfile
  updateManyApplicantProfile(data: ApplicantProfileUpdateManyMutationInput!, where: ApplicantProfileWhereInput): AffectedRowsOutput!
  updateOneApplicantProfile(data: ApplicantProfileUpdateInput!, where: ApplicantProfileWhereUniqueInput!): ApplicantProfile
  upsertOneApplicantProfile(
    where: ApplicantProfileWhereUniqueInput!
    create: ApplicantProfileCreateInput!
    update: ApplicantProfileUpdateInput!
  ): ApplicantProfile!
  createManyApplication(data: [ApplicationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneApplication(data: ApplicationCreateInput!): Application!
  deleteManyApplication(where: ApplicationWhereInput): AffectedRowsOutput!
  deleteOneApplication(where: ApplicationWhereUniqueInput!): Application
  updateManyApplication(data: ApplicationUpdateManyMutationInput!, where: ApplicationWhereInput): AffectedRowsOutput!
  updateOneApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  upsertOneApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  createManyChat(data: [ChatCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneChat(data: ChatCreateInput!): Chat!
  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput!
  deleteOneChat(where: ChatWhereUniqueInput!): Chat
  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput!
  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat!
  createManyChatMessage(data: [ChatMessageCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneChatMessage(data: ChatMessageCreateInput!): ChatMessage!
  deleteManyChatMessage(where: ChatMessageWhereInput): AffectedRowsOutput!
  deleteOneChatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  updateManyChatMessage(data: ChatMessageUpdateManyMutationInput!, where: ChatMessageWhereInput): AffectedRowsOutput!
  updateOneChatMessage(data: ChatMessageUpdateInput!, where: ChatMessageWhereUniqueInput!): ChatMessage
  upsertOneChatMessage(where: ChatMessageWhereUniqueInput!, create: ChatMessageCreateInput!, update: ChatMessageUpdateInput!): ChatMessage!
  createManyEmployerProfile(data: [EmployerProfileCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneEmployerProfile(data: EmployerProfileCreateInput!): EmployerProfile!
  deleteManyEmployerProfile(where: EmployerProfileWhereInput): AffectedRowsOutput!
  deleteOneEmployerProfile(where: EmployerProfileWhereUniqueInput!): EmployerProfile
  updateManyEmployerProfile(data: EmployerProfileUpdateManyMutationInput!, where: EmployerProfileWhereInput): AffectedRowsOutput!
  updateOneEmployerProfile(data: EmployerProfileUpdateInput!, where: EmployerProfileWhereUniqueInput!): EmployerProfile
  upsertOneEmployerProfile(
    where: EmployerProfileWhereUniqueInput!
    create: EmployerProfileCreateInput!
    update: EmployerProfileUpdateInput!
  ): EmployerProfile!
  createManyResume(data: [ResumeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneResume(data: ResumeCreateInput!): Resume!
  deleteManyResume(where: ResumeWhereInput): AffectedRowsOutput!
  deleteOneResume(where: ResumeWhereUniqueInput!): Resume
  updateManyResume(data: ResumeUpdateManyMutationInput!, where: ResumeWhereInput): AffectedRowsOutput!
  updateOneResume(data: ResumeUpdateInput!, where: ResumeWhereUniqueInput!): Resume
  upsertOneResume(where: ResumeWhereUniqueInput!, create: ResumeCreateInput!, update: ResumeUpdateInput!): Resume!
  createManyResumeSavedByEmployer(data: [ResumeSavedByEmployerCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneResumeSavedByEmployer(data: ResumeSavedByEmployerCreateInput!): ResumeSavedByEmployer!
  deleteManyResumeSavedByEmployer(where: ResumeSavedByEmployerWhereInput): AffectedRowsOutput!
  deleteOneResumeSavedByEmployer(where: ResumeSavedByEmployerWhereUniqueInput!): ResumeSavedByEmployer
  updateManyResumeSavedByEmployer(
    data: ResumeSavedByEmployerUpdateManyMutationInput!
    where: ResumeSavedByEmployerWhereInput
  ): AffectedRowsOutput!
  updateOneResumeSavedByEmployer(
    data: ResumeSavedByEmployerUpdateInput!
    where: ResumeSavedByEmployerWhereUniqueInput!
  ): ResumeSavedByEmployer
  upsertOneResumeSavedByEmployer(
    where: ResumeSavedByEmployerWhereUniqueInput!
    create: ResumeSavedByEmployerCreateInput!
    update: ResumeSavedByEmployerUpdateInput!
  ): ResumeSavedByEmployer!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneUser(data: UserCreateInput!): User!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  createManyVacancy(data: [VacancyCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneVacancy(data: VacancyCreateInput!): Vacancy!
  deleteManyVacancy(where: VacancyWhereInput): AffectedRowsOutput!
  deleteOneVacancy(where: VacancyWhereUniqueInput!): Vacancy
  updateManyVacancy(data: VacancyUpdateManyMutationInput!, where: VacancyWhereInput): AffectedRowsOutput!
  updateOneVacancy(data: VacancyUpdateInput!, where: VacancyWhereUniqueInput!): Vacancy
  upsertOneVacancy(where: VacancyWhereUniqueInput!, create: VacancyCreateInput!, update: VacancyUpdateInput!): Vacancy!
  createManyVacancySavedByApplicant(data: [VacancySavedByApplicantCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneVacancySavedByApplicant(data: VacancySavedByApplicantCreateInput!): VacancySavedByApplicant!
  deleteManyVacancySavedByApplicant(where: VacancySavedByApplicantWhereInput): AffectedRowsOutput!
  deleteOneVacancySavedByApplicant(where: VacancySavedByApplicantWhereUniqueInput!): VacancySavedByApplicant
  updateManyVacancySavedByApplicant(
    data: VacancySavedByApplicantUpdateManyMutationInput!
    where: VacancySavedByApplicantWhereInput
  ): AffectedRowsOutput!
  updateOneVacancySavedByApplicant(
    data: VacancySavedByApplicantUpdateInput!
    where: VacancySavedByApplicantWhereUniqueInput!
  ): VacancySavedByApplicant
  upsertOneVacancySavedByApplicant(
    where: VacancySavedByApplicantWhereUniqueInput!
    create: VacancySavedByApplicantCreateInput!
    update: VacancySavedByApplicantUpdateInput!
  ): VacancySavedByApplicant!
  sendAuthCodeMessage(input: SendMessageInput!): SendMessageOutput!
  verifyAuthCode(input: VerifyAuthCodeInput!): VerifyAuthCodeOutput!
  loginUser(input: LoginUserInput!): AccessTokenOutput!
  createAndLoginUser(input: CreateAndLoginUserInput!): AccessTokenOutput!
  loginAdmin(input: LoginAdminInput!): AccessTokenOutput!
  logout: Void
  refreshAccessToken: AccessTokenOutput!
}

type AffectedRowsOutput {
  count: Int!
}

input AdminCreateManyInput {
  id: String
  login: String!
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input AdminCreateInput {
  id: String
  login: String!
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input AdminUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input AdminUpdateInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AdminChatCreateManyInput {
  id: String
  userId: String!
  viewedByUser: Boolean
  viewedByAdmin: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input AdminChatCreateInput {
  id: String
  user: UserCreateNestedOneWithoutChatWithAdminInput!
  viewedByUser: Boolean
  viewedByAdmin: Boolean
  messages: AdminChatMessageCreateNestedManyWithoutChatInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutChatWithAdminInput {
  create: UserCreateWithoutChatWithAdminInput
  connectOrCreate: UserCreateOrConnectWithoutChatWithAdminInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChatWithAdminInput {
  id: String
  login: String!
  role: UserRole!
  applicantProfile: ApplicantProfileCreateNestedOneWithoutUserInput
  employerProfile: EmployerProfileCreateNestedOneWithoutUserInput
  chatsWithFirstUsers: ChatCreateNestedManyWithoutFirstUserInput
  chatsWithSecondUsers: ChatCreateNestedManyWithoutSecondUserInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ApplicantProfileCreateNestedOneWithoutUserInput {
  create: ApplicantProfileCreateWithoutUserInput
  connectOrCreate: ApplicantProfileCreateOrConnectWithoutUserInput
  connect: ApplicantProfileWhereUniqueInput
}

input ApplicantProfileCreateWithoutUserInput {
  id: String
  resume: ResumeCreateNestedOneWithoutApplicantProfileInput
  savedVacancies: VacancySavedByApplicantCreateNestedManyWithoutApplicantProfileInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ResumeCreateNestedOneWithoutApplicantProfileInput {
  create: ResumeCreateWithoutApplicantProfileInput
  connectOrCreate: ResumeCreateOrConnectWithoutApplicantProfileInput
  connect: ResumeWhereUniqueInput
}

input ResumeCreateWithoutApplicantProfileInput {
  id: String
  views: Int
  firstname: String!
  lastname: String
  phone: String!
  phoneHidden: Boolean!
  birthday: DateTime!
  placeOfResidence: Int!
  desiredPost: String
  fieldOfActivity: Int!
  education: String
  experience: String
  aboutMe: String
  savedBy: ResumeSavedByEmployerCreateNestedManyWithoutResumeInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ResumeSavedByEmployerCreateNestedManyWithoutResumeInput {
  create: [ResumeSavedByEmployerCreateWithoutResumeInput!]
  connectOrCreate: [ResumeSavedByEmployerCreateOrConnectWithoutResumeInput!]
  createMany: ResumeSavedByEmployerCreateManyResumeInputEnvelope
  connect: [ResumeSavedByEmployerWhereUniqueInput!]
}

input ResumeSavedByEmployerCreateWithoutResumeInput {
  employerProfile: EmployerProfileCreateNestedOneWithoutSavedResumesInput!
  assignedAt: DateTime
}

input EmployerProfileCreateNestedOneWithoutSavedResumesInput {
  create: EmployerProfileCreateWithoutSavedResumesInput
  connectOrCreate: EmployerProfileCreateOrConnectWithoutSavedResumesInput
  connect: EmployerProfileWhereUniqueInput
}

input EmployerProfileCreateWithoutSavedResumesInput {
  id: String
  companyName: String!
  description: String!
  user: UserCreateNestedOneWithoutEmployerProfileInput!
  vacancies: VacancyCreateNestedManyWithoutEmployerInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutEmployerProfileInput {
  create: UserCreateWithoutEmployerProfileInput
  connectOrCreate: UserCreateOrConnectWithoutEmployerProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEmployerProfileInput {
  id: String
  login: String!
  role: UserRole!
  applicantProfile: ApplicantProfileCreateNestedOneWithoutUserInput
  chatWithAdmin: AdminChatCreateNestedOneWithoutUserInput
  chatsWithFirstUsers: ChatCreateNestedManyWithoutFirstUserInput
  chatsWithSecondUsers: ChatCreateNestedManyWithoutSecondUserInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AdminChatCreateNestedOneWithoutUserInput {
  create: AdminChatCreateWithoutUserInput
  connectOrCreate: AdminChatCreateOrConnectWithoutUserInput
  connect: AdminChatWhereUniqueInput
}

input AdminChatCreateWithoutUserInput {
  id: String
  viewedByUser: Boolean
  viewedByAdmin: Boolean
  messages: AdminChatMessageCreateNestedManyWithoutChatInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AdminChatMessageCreateNestedManyWithoutChatInput {
  create: [AdminChatMessageCreateWithoutChatInput!]
  connectOrCreate: [AdminChatMessageCreateOrConnectWithoutChatInput!]
  createMany: AdminChatMessageCreateManyChatInputEnvelope
  connect: [AdminChatMessageWhereUniqueInput!]
}

input AdminChatMessageCreateWithoutChatInput {
  id: String
  message: String!
  createdAt: DateTime
}

input AdminChatMessageCreateOrConnectWithoutChatInput {
  where: AdminChatMessageWhereUniqueInput!
  create: AdminChatMessageCreateWithoutChatInput!
}

input AdminChatMessageCreateManyChatInputEnvelope {
  data: [AdminChatMessageCreateManyChatInput!]!
  skipDuplicates: Boolean
}

input AdminChatMessageCreateManyChatInput {
  id: String
  message: String!
  createdAt: DateTime
}

input AdminChatCreateOrConnectWithoutUserInput {
  where: AdminChatWhereUniqueInput!
  create: AdminChatCreateWithoutUserInput!
}

input ChatCreateNestedManyWithoutFirstUserInput {
  create: [ChatCreateWithoutFirstUserInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutFirstUserInput!]
  createMany: ChatCreateManyFirstUserInputEnvelope
  connect: [ChatWhereUniqueInput!]
}

input ChatCreateWithoutFirstUserInput {
  id: String
  secondUser: UserCreateNestedOneWithoutChatsWithSecondUsersInput!
  viewedByFirst: Boolean
  viewedBySecond: Boolean
  messages: ChatMessageCreateNestedManyWithoutChatInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutChatsWithSecondUsersInput {
  create: UserCreateWithoutChatsWithSecondUsersInput
  connectOrCreate: UserCreateOrConnectWithoutChatsWithSecondUsersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChatsWithSecondUsersInput {
  id: String
  login: String!
  role: UserRole!
  applicantProfile: ApplicantProfileCreateNestedOneWithoutUserInput
  employerProfile: EmployerProfileCreateNestedOneWithoutUserInput
  chatWithAdmin: AdminChatCreateNestedOneWithoutUserInput
  chatsWithFirstUsers: ChatCreateNestedManyWithoutFirstUserInput
  createdAt: DateTime
  updatedAt: DateTime
}

input EmployerProfileCreateNestedOneWithoutUserInput {
  create: EmployerProfileCreateWithoutUserInput
  connectOrCreate: EmployerProfileCreateOrConnectWithoutUserInput
  connect: EmployerProfileWhereUniqueInput
}

input EmployerProfileCreateWithoutUserInput {
  id: String
  companyName: String!
  description: String!
  savedResumes: ResumeSavedByEmployerCreateNestedManyWithoutEmployerProfileInput
  vacancies: VacancyCreateNestedManyWithoutEmployerInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ResumeSavedByEmployerCreateNestedManyWithoutEmployerProfileInput {
  create: [ResumeSavedByEmployerCreateWithoutEmployerProfileInput!]
  connectOrCreate: [ResumeSavedByEmployerCreateOrConnectWithoutEmployerProfileInput!]
  createMany: ResumeSavedByEmployerCreateManyEmployerProfileInputEnvelope
  connect: [ResumeSavedByEmployerWhereUniqueInput!]
}

input ResumeSavedByEmployerCreateWithoutEmployerProfileInput {
  resume: ResumeCreateNestedOneWithoutSavedByInput!
  assignedAt: DateTime
}

input ResumeCreateNestedOneWithoutSavedByInput {
  create: ResumeCreateWithoutSavedByInput
  connectOrCreate: ResumeCreateOrConnectWithoutSavedByInput
  connect: ResumeWhereUniqueInput
}

input ResumeCreateWithoutSavedByInput {
  id: String
  views: Int
  firstname: String!
  lastname: String
  phone: String!
  phoneHidden: Boolean!
  birthday: DateTime!
  placeOfResidence: Int!
  desiredPost: String
  fieldOfActivity: Int!
  education: String
  experience: String
  aboutMe: String
  applicantProfile: ApplicantProfileCreateNestedOneWithoutResumeInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input ApplicantProfileCreateNestedOneWithoutResumeInput {
  create: ApplicantProfileCreateWithoutResumeInput
  connectOrCreate: ApplicantProfileCreateOrConnectWithoutResumeInput
  connect: ApplicantProfileWhereUniqueInput
}

input ApplicantProfileCreateWithoutResumeInput {
  id: String
  savedVacancies: VacancySavedByApplicantCreateNestedManyWithoutApplicantProfileInput
  user: UserCreateNestedOneWithoutApplicantProfileInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input VacancySavedByApplicantCreateNestedManyWithoutApplicantProfileInput {
  create: [VacancySavedByApplicantCreateWithoutApplicantProfileInput!]
  connectOrCreate: [VacancySavedByApplicantCreateOrConnectWithoutApplicantProfileInput!]
  createMany: VacancySavedByApplicantCreateManyApplicantProfileInputEnvelope
  connect: [VacancySavedByApplicantWhereUniqueInput!]
}

input VacancySavedByApplicantCreateWithoutApplicantProfileInput {
  vacancy: VacancyCreateNestedOneWithoutSavedByInput!
  assignedAt: DateTime
}

input VacancyCreateNestedOneWithoutSavedByInput {
  create: VacancyCreateWithoutSavedByInput
  connectOrCreate: VacancyCreateOrConnectWithoutSavedByInput
  connect: VacancyWhereUniqueInput
}

input VacancyCreateWithoutSavedByInput {
  id: String
  employer: EmployerProfileCreateNestedOneWithoutVacanciesInput!
  salary: Int!
  views: Int
  post: String!
  fieldOfActivity: Int!
  placeOfWork: Int!
  description: String!
  duties: String
  requirements: String
  workingSchedule: String
  phone: String!
  phoneHidden: Boolean!
  archived: Boolean
  archivedReason: String
  createdAt: DateTime
  updatedAt: DateTime
}

input EmployerProfileCreateNestedOneWithoutVacanciesInput {
  create: EmployerProfileCreateWithoutVacanciesInput
  connectOrCreate: EmployerProfileCreateOrConnectWithoutVacanciesInput
  connect: EmployerProfileWhereUniqueInput
}

input EmployerProfileCreateWithoutVacanciesInput {
  id: String
  companyName: String!
  description: String!
  savedResumes: ResumeSavedByEmployerCreateNestedManyWithoutEmployerProfileInput
  user: UserCreateNestedOneWithoutEmployerProfileInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input EmployerProfileCreateOrConnectWithoutVacanciesInput {
  where: EmployerProfileWhereUniqueInput!
  create: EmployerProfileCreateWithoutVacanciesInput!
}

input VacancyCreateOrConnectWithoutSavedByInput {
  where: VacancyWhereUniqueInput!
  create: VacancyCreateWithoutSavedByInput!
}

input VacancySavedByApplicantCreateOrConnectWithoutApplicantProfileInput {
  where: VacancySavedByApplicantWhereUniqueInput!
  create: VacancySavedByApplicantCreateWithoutApplicantProfileInput!
}

input VacancySavedByApplicantCreateManyApplicantProfileInputEnvelope {
  data: [VacancySavedByApplicantCreateManyApplicantProfileInput!]!
  skipDuplicates: Boolean
}

input VacancySavedByApplicantCreateManyApplicantProfileInput {
  vacancyId: String!
  assignedAt: DateTime
}

input UserCreateNestedOneWithoutApplicantProfileInput {
  create: UserCreateWithoutApplicantProfileInput
  connectOrCreate: UserCreateOrConnectWithoutApplicantProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutApplicantProfileInput {
  id: String
  login: String!
  role: UserRole!
  employerProfile: EmployerProfileCreateNestedOneWithoutUserInput
  chatWithAdmin: AdminChatCreateNestedOneWithoutUserInput
  chatsWithFirstUsers: ChatCreateNestedManyWithoutFirstUserInput
  chatsWithSecondUsers: ChatCreateNestedManyWithoutSecondUserInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatCreateNestedManyWithoutSecondUserInput {
  create: [ChatCreateWithoutSecondUserInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutSecondUserInput!]
  createMany: ChatCreateManySecondUserInputEnvelope
  connect: [ChatWhereUniqueInput!]
}

input ChatCreateWithoutSecondUserInput {
  id: String
  firstUser: UserCreateNestedOneWithoutChatsWithFirstUsersInput!
  viewedByFirst: Boolean
  viewedBySecond: Boolean
  messages: ChatMessageCreateNestedManyWithoutChatInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutChatsWithFirstUsersInput {
  create: UserCreateWithoutChatsWithFirstUsersInput
  connectOrCreate: UserCreateOrConnectWithoutChatsWithFirstUsersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChatsWithFirstUsersInput {
  id: String
  login: String!
  role: UserRole!
  applicantProfile: ApplicantProfileCreateNestedOneWithoutUserInput
  employerProfile: EmployerProfileCreateNestedOneWithoutUserInput
  chatWithAdmin: AdminChatCreateNestedOneWithoutUserInput
  chatsWithSecondUsers: ChatCreateNestedManyWithoutSecondUserInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutChatsWithFirstUsersInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutChatsWithFirstUsersInput!
}

input ChatMessageCreateNestedManyWithoutChatInput {
  create: [ChatMessageCreateWithoutChatInput!]
  connectOrCreate: [ChatMessageCreateOrConnectWithoutChatInput!]
  createMany: ChatMessageCreateManyChatInputEnvelope
  connect: [ChatMessageWhereUniqueInput!]
}

input ChatMessageCreateWithoutChatInput {
  id: String
  message: String!
  createdAt: DateTime
}

input ChatMessageCreateOrConnectWithoutChatInput {
  where: ChatMessageWhereUniqueInput!
  create: ChatMessageCreateWithoutChatInput!
}

input ChatMessageCreateManyChatInputEnvelope {
  data: [ChatMessageCreateManyChatInput!]!
  skipDuplicates: Boolean
}

input ChatMessageCreateManyChatInput {
  id: String
  message: String!
  createdAt: DateTime
}

input ChatCreateOrConnectWithoutSecondUserInput {
  where: ChatWhereUniqueInput!
  create: ChatCreateWithoutSecondUserInput!
}

input ChatCreateManySecondUserInputEnvelope {
  data: [ChatCreateManySecondUserInput!]!
  skipDuplicates: Boolean
}

input ChatCreateManySecondUserInput {
  id: String
  firstUserId: String!
  viewedByFirst: Boolean
  viewedBySecond: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutApplicantProfileInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutApplicantProfileInput!
}

input ApplicantProfileCreateOrConnectWithoutResumeInput {
  where: ApplicantProfileWhereUniqueInput!
  create: ApplicantProfileCreateWithoutResumeInput!
}

input ResumeCreateOrConnectWithoutSavedByInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutSavedByInput!
}

input ResumeSavedByEmployerCreateOrConnectWithoutEmployerProfileInput {
  where: ResumeSavedByEmployerWhereUniqueInput!
  create: ResumeSavedByEmployerCreateWithoutEmployerProfileInput!
}

input ResumeSavedByEmployerCreateManyEmployerProfileInputEnvelope {
  data: [ResumeSavedByEmployerCreateManyEmployerProfileInput!]!
  skipDuplicates: Boolean
}

input ResumeSavedByEmployerCreateManyEmployerProfileInput {
  resumeId: String!
  assignedAt: DateTime
}

input VacancyCreateNestedManyWithoutEmployerInput {
  create: [VacancyCreateWithoutEmployerInput!]
  connectOrCreate: [VacancyCreateOrConnectWithoutEmployerInput!]
  createMany: VacancyCreateManyEmployerInputEnvelope
  connect: [VacancyWhereUniqueInput!]
}

input VacancyCreateWithoutEmployerInput {
  id: String
  salary: Int!
  views: Int
  post: String!
  fieldOfActivity: Int!
  placeOfWork: Int!
  description: String!
  duties: String
  requirements: String
  workingSchedule: String
  phone: String!
  phoneHidden: Boolean!
  archived: Boolean
  archivedReason: String
  savedBy: VacancySavedByApplicantCreateNestedManyWithoutVacancyInput
  createdAt: DateTime
  updatedAt: DateTime
}

input VacancySavedByApplicantCreateNestedManyWithoutVacancyInput {
  create: [VacancySavedByApplicantCreateWithoutVacancyInput!]
  connectOrCreate: [VacancySavedByApplicantCreateOrConnectWithoutVacancyInput!]
  createMany: VacancySavedByApplicantCreateManyVacancyInputEnvelope
  connect: [VacancySavedByApplicantWhereUniqueInput!]
}

input VacancySavedByApplicantCreateWithoutVacancyInput {
  applicantProfile: ApplicantProfileCreateNestedOneWithoutSavedVacanciesInput!
  assignedAt: DateTime
}

input ApplicantProfileCreateNestedOneWithoutSavedVacanciesInput {
  create: ApplicantProfileCreateWithoutSavedVacanciesInput
  connectOrCreate: ApplicantProfileCreateOrConnectWithoutSavedVacanciesInput
  connect: ApplicantProfileWhereUniqueInput
}

input ApplicantProfileCreateWithoutSavedVacanciesInput {
  id: String
  resume: ResumeCreateNestedOneWithoutApplicantProfileInput
  user: UserCreateNestedOneWithoutApplicantProfileInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input ApplicantProfileCreateOrConnectWithoutSavedVacanciesInput {
  where: ApplicantProfileWhereUniqueInput!
  create: ApplicantProfileCreateWithoutSavedVacanciesInput!
}

input VacancySavedByApplicantCreateOrConnectWithoutVacancyInput {
  where: VacancySavedByApplicantWhereUniqueInput!
  create: VacancySavedByApplicantCreateWithoutVacancyInput!
}

input VacancySavedByApplicantCreateManyVacancyInputEnvelope {
  data: [VacancySavedByApplicantCreateManyVacancyInput!]!
  skipDuplicates: Boolean
}

input VacancySavedByApplicantCreateManyVacancyInput {
  applicantProfileId: String!
  assignedAt: DateTime
}

input VacancyCreateOrConnectWithoutEmployerInput {
  where: VacancyWhereUniqueInput!
  create: VacancyCreateWithoutEmployerInput!
}

input VacancyCreateManyEmployerInputEnvelope {
  data: [VacancyCreateManyEmployerInput!]!
  skipDuplicates: Boolean
}

input VacancyCreateManyEmployerInput {
  id: String
  salary: Int!
  views: Int
  post: String!
  fieldOfActivity: Int!
  placeOfWork: Int!
  description: String!
  duties: String
  requirements: String
  workingSchedule: String
  phone: String!
  phoneHidden: Boolean!
  archived: Boolean
  archivedReason: String
  createdAt: DateTime
  updatedAt: DateTime
}

input EmployerProfileCreateOrConnectWithoutUserInput {
  where: EmployerProfileWhereUniqueInput!
  create: EmployerProfileCreateWithoutUserInput!
}

input UserCreateOrConnectWithoutChatsWithSecondUsersInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutChatsWithSecondUsersInput!
}

input ChatCreateOrConnectWithoutFirstUserInput {
  where: ChatWhereUniqueInput!
  create: ChatCreateWithoutFirstUserInput!
}

input ChatCreateManyFirstUserInputEnvelope {
  data: [ChatCreateManyFirstUserInput!]!
  skipDuplicates: Boolean
}

input ChatCreateManyFirstUserInput {
  id: String
  secondUserId: String!
  viewedByFirst: Boolean
  viewedBySecond: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutEmployerProfileInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutEmployerProfileInput!
}

input EmployerProfileCreateOrConnectWithoutSavedResumesInput {
  where: EmployerProfileWhereUniqueInput!
  create: EmployerProfileCreateWithoutSavedResumesInput!
}

input ResumeSavedByEmployerCreateOrConnectWithoutResumeInput {
  where: ResumeSavedByEmployerWhereUniqueInput!
  create: ResumeSavedByEmployerCreateWithoutResumeInput!
}

input ResumeSavedByEmployerCreateManyResumeInputEnvelope {
  data: [ResumeSavedByEmployerCreateManyResumeInput!]!
  skipDuplicates: Boolean
}

input ResumeSavedByEmployerCreateManyResumeInput {
  employerProfileId: String!
  assignedAt: DateTime
}

input ResumeCreateOrConnectWithoutApplicantProfileInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutApplicantProfileInput!
}

input ApplicantProfileCreateOrConnectWithoutUserInput {
  where: ApplicantProfileWhereUniqueInput!
  create: ApplicantProfileCreateWithoutUserInput!
}

input UserCreateOrConnectWithoutChatWithAdminInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutChatWithAdminInput!
}

input AdminChatUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  viewedByUser: BoolFieldUpdateOperationsInput
  viewedByAdmin: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input AdminChatUpdateInput {
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutChatWithAdminNestedInput
  viewedByUser: BoolFieldUpdateOperationsInput
  viewedByAdmin: BoolFieldUpdateOperationsInput
  messages: AdminChatMessageUpdateManyWithoutChatNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutChatWithAdminNestedInput {
  create: UserCreateWithoutChatWithAdminInput
  connectOrCreate: UserCreateOrConnectWithoutChatWithAdminInput
  upsert: UserUpsertWithoutChatWithAdminInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutChatWithAdminInput
}

input UserUpsertWithoutChatWithAdminInput {
  update: UserUpdateWithoutChatWithAdminInput!
  create: UserCreateWithoutChatWithAdminInput!
}

input UserUpdateWithoutChatWithAdminInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  applicantProfile: ApplicantProfileUpdateOneWithoutUserNestedInput
  employerProfile: EmployerProfileUpdateOneWithoutUserNestedInput
  chatsWithFirstUsers: ChatUpdateManyWithoutFirstUserNestedInput
  chatsWithSecondUsers: ChatUpdateManyWithoutSecondUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EnumUserRoleFieldUpdateOperationsInput {
  set: UserRole
}

input ApplicantProfileUpdateOneWithoutUserNestedInput {
  create: ApplicantProfileCreateWithoutUserInput
  connectOrCreate: ApplicantProfileCreateOrConnectWithoutUserInput
  upsert: ApplicantProfileUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: ApplicantProfileWhereUniqueInput
  update: ApplicantProfileUpdateWithoutUserInput
}

input ApplicantProfileUpsertWithoutUserInput {
  update: ApplicantProfileUpdateWithoutUserInput!
  create: ApplicantProfileCreateWithoutUserInput!
}

input ApplicantProfileUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  resume: ResumeUpdateOneWithoutApplicantProfileNestedInput
  savedVacancies: VacancySavedByApplicantUpdateManyWithoutApplicantProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ResumeUpdateOneWithoutApplicantProfileNestedInput {
  create: ResumeCreateWithoutApplicantProfileInput
  connectOrCreate: ResumeCreateOrConnectWithoutApplicantProfileInput
  upsert: ResumeUpsertWithoutApplicantProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: ResumeWhereUniqueInput
  update: ResumeUpdateWithoutApplicantProfileInput
}

input ResumeUpsertWithoutApplicantProfileInput {
  update: ResumeUpdateWithoutApplicantProfileInput!
  create: ResumeCreateWithoutApplicantProfileInput!
}

input ResumeUpdateWithoutApplicantProfileInput {
  id: StringFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  phoneHidden: BoolFieldUpdateOperationsInput
  birthday: DateTimeFieldUpdateOperationsInput
  placeOfResidence: IntFieldUpdateOperationsInput
  desiredPost: NullableStringFieldUpdateOperationsInput
  fieldOfActivity: IntFieldUpdateOperationsInput
  education: NullableStringFieldUpdateOperationsInput
  experience: NullableStringFieldUpdateOperationsInput
  aboutMe: NullableStringFieldUpdateOperationsInput
  savedBy: ResumeSavedByEmployerUpdateManyWithoutResumeNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input ResumeSavedByEmployerUpdateManyWithoutResumeNestedInput {
  create: [ResumeSavedByEmployerCreateWithoutResumeInput!]
  connectOrCreate: [ResumeSavedByEmployerCreateOrConnectWithoutResumeInput!]
  upsert: [ResumeSavedByEmployerUpsertWithWhereUniqueWithoutResumeInput!]
  createMany: ResumeSavedByEmployerCreateManyResumeInputEnvelope
  set: [ResumeSavedByEmployerWhereUniqueInput!]
  disconnect: [ResumeSavedByEmployerWhereUniqueInput!]
  delete: [ResumeSavedByEmployerWhereUniqueInput!]
  connect: [ResumeSavedByEmployerWhereUniqueInput!]
  update: [ResumeSavedByEmployerUpdateWithWhereUniqueWithoutResumeInput!]
  updateMany: [ResumeSavedByEmployerUpdateManyWithWhereWithoutResumeInput!]
  deleteMany: [ResumeSavedByEmployerScalarWhereInput!]
}

input ResumeSavedByEmployerUpsertWithWhereUniqueWithoutResumeInput {
  where: ResumeSavedByEmployerWhereUniqueInput!
  update: ResumeSavedByEmployerUpdateWithoutResumeInput!
  create: ResumeSavedByEmployerCreateWithoutResumeInput!
}

input ResumeSavedByEmployerUpdateWithoutResumeInput {
  employerProfile: EmployerProfileUpdateOneRequiredWithoutSavedResumesNestedInput
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input EmployerProfileUpdateOneRequiredWithoutSavedResumesNestedInput {
  create: EmployerProfileCreateWithoutSavedResumesInput
  connectOrCreate: EmployerProfileCreateOrConnectWithoutSavedResumesInput
  upsert: EmployerProfileUpsertWithoutSavedResumesInput
  connect: EmployerProfileWhereUniqueInput
  update: EmployerProfileUpdateWithoutSavedResumesInput
}

input EmployerProfileUpsertWithoutSavedResumesInput {
  update: EmployerProfileUpdateWithoutSavedResumesInput!
  create: EmployerProfileCreateWithoutSavedResumesInput!
}

input EmployerProfileUpdateWithoutSavedResumesInput {
  id: StringFieldUpdateOperationsInput
  companyName: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutEmployerProfileNestedInput
  vacancies: VacancyUpdateManyWithoutEmployerNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutEmployerProfileNestedInput {
  create: UserCreateWithoutEmployerProfileInput
  connectOrCreate: UserCreateOrConnectWithoutEmployerProfileInput
  upsert: UserUpsertWithoutEmployerProfileInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutEmployerProfileInput
}

input UserUpsertWithoutEmployerProfileInput {
  update: UserUpdateWithoutEmployerProfileInput!
  create: UserCreateWithoutEmployerProfileInput!
}

input UserUpdateWithoutEmployerProfileInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  applicantProfile: ApplicantProfileUpdateOneWithoutUserNestedInput
  chatWithAdmin: AdminChatUpdateOneWithoutUserNestedInput
  chatsWithFirstUsers: ChatUpdateManyWithoutFirstUserNestedInput
  chatsWithSecondUsers: ChatUpdateManyWithoutSecondUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AdminChatUpdateOneWithoutUserNestedInput {
  create: AdminChatCreateWithoutUserInput
  connectOrCreate: AdminChatCreateOrConnectWithoutUserInput
  upsert: AdminChatUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: AdminChatWhereUniqueInput
  update: AdminChatUpdateWithoutUserInput
}

input AdminChatUpsertWithoutUserInput {
  update: AdminChatUpdateWithoutUserInput!
  create: AdminChatCreateWithoutUserInput!
}

input AdminChatUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  viewedByUser: BoolFieldUpdateOperationsInput
  viewedByAdmin: BoolFieldUpdateOperationsInput
  messages: AdminChatMessageUpdateManyWithoutChatNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AdminChatMessageUpdateManyWithoutChatNestedInput {
  create: [AdminChatMessageCreateWithoutChatInput!]
  connectOrCreate: [AdminChatMessageCreateOrConnectWithoutChatInput!]
  upsert: [AdminChatMessageUpsertWithWhereUniqueWithoutChatInput!]
  createMany: AdminChatMessageCreateManyChatInputEnvelope
  set: [AdminChatMessageWhereUniqueInput!]
  disconnect: [AdminChatMessageWhereUniqueInput!]
  delete: [AdminChatMessageWhereUniqueInput!]
  connect: [AdminChatMessageWhereUniqueInput!]
  update: [AdminChatMessageUpdateWithWhereUniqueWithoutChatInput!]
  updateMany: [AdminChatMessageUpdateManyWithWhereWithoutChatInput!]
  deleteMany: [AdminChatMessageScalarWhereInput!]
}

input AdminChatMessageUpsertWithWhereUniqueWithoutChatInput {
  where: AdminChatMessageWhereUniqueInput!
  update: AdminChatMessageUpdateWithoutChatInput!
  create: AdminChatMessageCreateWithoutChatInput!
}

input AdminChatMessageUpdateWithoutChatInput {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input AdminChatMessageUpdateWithWhereUniqueWithoutChatInput {
  where: AdminChatMessageWhereUniqueInput!
  data: AdminChatMessageUpdateWithoutChatInput!
}

input AdminChatMessageUpdateManyWithWhereWithoutChatInput {
  where: AdminChatMessageScalarWhereInput!
  data: AdminChatMessageUpdateManyMutationInput!
}

input AdminChatMessageScalarWhereInput {
  AND: [AdminChatMessageScalarWhereInput!]
  OR: [AdminChatMessageScalarWhereInput!]
  NOT: [AdminChatMessageScalarWhereInput!]
  id: StringFilter
  chatId: StringFilter
  message: StringFilter
  createdAt: DateTimeFilter
}

input AdminChatMessageUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ChatUpdateManyWithoutFirstUserNestedInput {
  create: [ChatCreateWithoutFirstUserInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutFirstUserInput!]
  upsert: [ChatUpsertWithWhereUniqueWithoutFirstUserInput!]
  createMany: ChatCreateManyFirstUserInputEnvelope
  set: [ChatWhereUniqueInput!]
  disconnect: [ChatWhereUniqueInput!]
  delete: [ChatWhereUniqueInput!]
  connect: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueWithoutFirstUserInput!]
  updateMany: [ChatUpdateManyWithWhereWithoutFirstUserInput!]
  deleteMany: [ChatScalarWhereInput!]
}

input ChatUpsertWithWhereUniqueWithoutFirstUserInput {
  where: ChatWhereUniqueInput!
  update: ChatUpdateWithoutFirstUserInput!
  create: ChatCreateWithoutFirstUserInput!
}

input ChatUpdateWithoutFirstUserInput {
  id: StringFieldUpdateOperationsInput
  secondUser: UserUpdateOneRequiredWithoutChatsWithSecondUsersNestedInput
  viewedByFirst: BoolFieldUpdateOperationsInput
  viewedBySecond: BoolFieldUpdateOperationsInput
  messages: ChatMessageUpdateManyWithoutChatNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutChatsWithSecondUsersNestedInput {
  create: UserCreateWithoutChatsWithSecondUsersInput
  connectOrCreate: UserCreateOrConnectWithoutChatsWithSecondUsersInput
  upsert: UserUpsertWithoutChatsWithSecondUsersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutChatsWithSecondUsersInput
}

input UserUpsertWithoutChatsWithSecondUsersInput {
  update: UserUpdateWithoutChatsWithSecondUsersInput!
  create: UserCreateWithoutChatsWithSecondUsersInput!
}

input UserUpdateWithoutChatsWithSecondUsersInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  applicantProfile: ApplicantProfileUpdateOneWithoutUserNestedInput
  employerProfile: EmployerProfileUpdateOneWithoutUserNestedInput
  chatWithAdmin: AdminChatUpdateOneWithoutUserNestedInput
  chatsWithFirstUsers: ChatUpdateManyWithoutFirstUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployerProfileUpdateOneWithoutUserNestedInput {
  create: EmployerProfileCreateWithoutUserInput
  connectOrCreate: EmployerProfileCreateOrConnectWithoutUserInput
  upsert: EmployerProfileUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: EmployerProfileWhereUniqueInput
  update: EmployerProfileUpdateWithoutUserInput
}

input EmployerProfileUpsertWithoutUserInput {
  update: EmployerProfileUpdateWithoutUserInput!
  create: EmployerProfileCreateWithoutUserInput!
}

input EmployerProfileUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  companyName: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  savedResumes: ResumeSavedByEmployerUpdateManyWithoutEmployerProfileNestedInput
  vacancies: VacancyUpdateManyWithoutEmployerNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ResumeSavedByEmployerUpdateManyWithoutEmployerProfileNestedInput {
  create: [ResumeSavedByEmployerCreateWithoutEmployerProfileInput!]
  connectOrCreate: [ResumeSavedByEmployerCreateOrConnectWithoutEmployerProfileInput!]
  upsert: [ResumeSavedByEmployerUpsertWithWhereUniqueWithoutEmployerProfileInput!]
  createMany: ResumeSavedByEmployerCreateManyEmployerProfileInputEnvelope
  set: [ResumeSavedByEmployerWhereUniqueInput!]
  disconnect: [ResumeSavedByEmployerWhereUniqueInput!]
  delete: [ResumeSavedByEmployerWhereUniqueInput!]
  connect: [ResumeSavedByEmployerWhereUniqueInput!]
  update: [ResumeSavedByEmployerUpdateWithWhereUniqueWithoutEmployerProfileInput!]
  updateMany: [ResumeSavedByEmployerUpdateManyWithWhereWithoutEmployerProfileInput!]
  deleteMany: [ResumeSavedByEmployerScalarWhereInput!]
}

input ResumeSavedByEmployerUpsertWithWhereUniqueWithoutEmployerProfileInput {
  where: ResumeSavedByEmployerWhereUniqueInput!
  update: ResumeSavedByEmployerUpdateWithoutEmployerProfileInput!
  create: ResumeSavedByEmployerCreateWithoutEmployerProfileInput!
}

input ResumeSavedByEmployerUpdateWithoutEmployerProfileInput {
  resume: ResumeUpdateOneRequiredWithoutSavedByNestedInput
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input ResumeUpdateOneRequiredWithoutSavedByNestedInput {
  create: ResumeCreateWithoutSavedByInput
  connectOrCreate: ResumeCreateOrConnectWithoutSavedByInput
  upsert: ResumeUpsertWithoutSavedByInput
  connect: ResumeWhereUniqueInput
  update: ResumeUpdateWithoutSavedByInput
}

input ResumeUpsertWithoutSavedByInput {
  update: ResumeUpdateWithoutSavedByInput!
  create: ResumeCreateWithoutSavedByInput!
}

input ResumeUpdateWithoutSavedByInput {
  id: StringFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  phoneHidden: BoolFieldUpdateOperationsInput
  birthday: DateTimeFieldUpdateOperationsInput
  placeOfResidence: IntFieldUpdateOperationsInput
  desiredPost: NullableStringFieldUpdateOperationsInput
  fieldOfActivity: IntFieldUpdateOperationsInput
  education: NullableStringFieldUpdateOperationsInput
  experience: NullableStringFieldUpdateOperationsInput
  aboutMe: NullableStringFieldUpdateOperationsInput
  applicantProfile: ApplicantProfileUpdateOneRequiredWithoutResumeNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ApplicantProfileUpdateOneRequiredWithoutResumeNestedInput {
  create: ApplicantProfileCreateWithoutResumeInput
  connectOrCreate: ApplicantProfileCreateOrConnectWithoutResumeInput
  upsert: ApplicantProfileUpsertWithoutResumeInput
  connect: ApplicantProfileWhereUniqueInput
  update: ApplicantProfileUpdateWithoutResumeInput
}

input ApplicantProfileUpsertWithoutResumeInput {
  update: ApplicantProfileUpdateWithoutResumeInput!
  create: ApplicantProfileCreateWithoutResumeInput!
}

input ApplicantProfileUpdateWithoutResumeInput {
  id: StringFieldUpdateOperationsInput
  savedVacancies: VacancySavedByApplicantUpdateManyWithoutApplicantProfileNestedInput
  user: UserUpdateOneRequiredWithoutApplicantProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VacancySavedByApplicantUpdateManyWithoutApplicantProfileNestedInput {
  create: [VacancySavedByApplicantCreateWithoutApplicantProfileInput!]
  connectOrCreate: [VacancySavedByApplicantCreateOrConnectWithoutApplicantProfileInput!]
  upsert: [VacancySavedByApplicantUpsertWithWhereUniqueWithoutApplicantProfileInput!]
  createMany: VacancySavedByApplicantCreateManyApplicantProfileInputEnvelope
  set: [VacancySavedByApplicantWhereUniqueInput!]
  disconnect: [VacancySavedByApplicantWhereUniqueInput!]
  delete: [VacancySavedByApplicantWhereUniqueInput!]
  connect: [VacancySavedByApplicantWhereUniqueInput!]
  update: [VacancySavedByApplicantUpdateWithWhereUniqueWithoutApplicantProfileInput!]
  updateMany: [VacancySavedByApplicantUpdateManyWithWhereWithoutApplicantProfileInput!]
  deleteMany: [VacancySavedByApplicantScalarWhereInput!]
}

input VacancySavedByApplicantUpsertWithWhereUniqueWithoutApplicantProfileInput {
  where: VacancySavedByApplicantWhereUniqueInput!
  update: VacancySavedByApplicantUpdateWithoutApplicantProfileInput!
  create: VacancySavedByApplicantCreateWithoutApplicantProfileInput!
}

input VacancySavedByApplicantUpdateWithoutApplicantProfileInput {
  vacancy: VacancyUpdateOneRequiredWithoutSavedByNestedInput
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input VacancyUpdateOneRequiredWithoutSavedByNestedInput {
  create: VacancyCreateWithoutSavedByInput
  connectOrCreate: VacancyCreateOrConnectWithoutSavedByInput
  upsert: VacancyUpsertWithoutSavedByInput
  connect: VacancyWhereUniqueInput
  update: VacancyUpdateWithoutSavedByInput
}

input VacancyUpsertWithoutSavedByInput {
  update: VacancyUpdateWithoutSavedByInput!
  create: VacancyCreateWithoutSavedByInput!
}

input VacancyUpdateWithoutSavedByInput {
  id: StringFieldUpdateOperationsInput
  employer: EmployerProfileUpdateOneRequiredWithoutVacanciesNestedInput
  salary: IntFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  post: StringFieldUpdateOperationsInput
  fieldOfActivity: IntFieldUpdateOperationsInput
  placeOfWork: IntFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  duties: NullableStringFieldUpdateOperationsInput
  requirements: NullableStringFieldUpdateOperationsInput
  workingSchedule: NullableStringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  phoneHidden: BoolFieldUpdateOperationsInput
  archived: BoolFieldUpdateOperationsInput
  archivedReason: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployerProfileUpdateOneRequiredWithoutVacanciesNestedInput {
  create: EmployerProfileCreateWithoutVacanciesInput
  connectOrCreate: EmployerProfileCreateOrConnectWithoutVacanciesInput
  upsert: EmployerProfileUpsertWithoutVacanciesInput
  connect: EmployerProfileWhereUniqueInput
  update: EmployerProfileUpdateWithoutVacanciesInput
}

input EmployerProfileUpsertWithoutVacanciesInput {
  update: EmployerProfileUpdateWithoutVacanciesInput!
  create: EmployerProfileCreateWithoutVacanciesInput!
}

input EmployerProfileUpdateWithoutVacanciesInput {
  id: StringFieldUpdateOperationsInput
  companyName: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  savedResumes: ResumeSavedByEmployerUpdateManyWithoutEmployerProfileNestedInput
  user: UserUpdateOneRequiredWithoutEmployerProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VacancySavedByApplicantUpdateWithWhereUniqueWithoutApplicantProfileInput {
  where: VacancySavedByApplicantWhereUniqueInput!
  data: VacancySavedByApplicantUpdateWithoutApplicantProfileInput!
}

input VacancySavedByApplicantUpdateManyWithWhereWithoutApplicantProfileInput {
  where: VacancySavedByApplicantScalarWhereInput!
  data: VacancySavedByApplicantUpdateManyMutationInput!
}

input VacancySavedByApplicantScalarWhereInput {
  AND: [VacancySavedByApplicantScalarWhereInput!]
  OR: [VacancySavedByApplicantScalarWhereInput!]
  NOT: [VacancySavedByApplicantScalarWhereInput!]
  applicantProfileId: StringFilter
  vacancyId: StringFilter
  assignedAt: DateTimeFilter
}

input VacancySavedByApplicantUpdateManyMutationInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutApplicantProfileNestedInput {
  create: UserCreateWithoutApplicantProfileInput
  connectOrCreate: UserCreateOrConnectWithoutApplicantProfileInput
  upsert: UserUpsertWithoutApplicantProfileInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutApplicantProfileInput
}

input UserUpsertWithoutApplicantProfileInput {
  update: UserUpdateWithoutApplicantProfileInput!
  create: UserCreateWithoutApplicantProfileInput!
}

input UserUpdateWithoutApplicantProfileInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  employerProfile: EmployerProfileUpdateOneWithoutUserNestedInput
  chatWithAdmin: AdminChatUpdateOneWithoutUserNestedInput
  chatsWithFirstUsers: ChatUpdateManyWithoutFirstUserNestedInput
  chatsWithSecondUsers: ChatUpdateManyWithoutSecondUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatUpdateManyWithoutSecondUserNestedInput {
  create: [ChatCreateWithoutSecondUserInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutSecondUserInput!]
  upsert: [ChatUpsertWithWhereUniqueWithoutSecondUserInput!]
  createMany: ChatCreateManySecondUserInputEnvelope
  set: [ChatWhereUniqueInput!]
  disconnect: [ChatWhereUniqueInput!]
  delete: [ChatWhereUniqueInput!]
  connect: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueWithoutSecondUserInput!]
  updateMany: [ChatUpdateManyWithWhereWithoutSecondUserInput!]
  deleteMany: [ChatScalarWhereInput!]
}

input ChatUpsertWithWhereUniqueWithoutSecondUserInput {
  where: ChatWhereUniqueInput!
  update: ChatUpdateWithoutSecondUserInput!
  create: ChatCreateWithoutSecondUserInput!
}

input ChatUpdateWithoutSecondUserInput {
  id: StringFieldUpdateOperationsInput
  firstUser: UserUpdateOneRequiredWithoutChatsWithFirstUsersNestedInput
  viewedByFirst: BoolFieldUpdateOperationsInput
  viewedBySecond: BoolFieldUpdateOperationsInput
  messages: ChatMessageUpdateManyWithoutChatNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutChatsWithFirstUsersNestedInput {
  create: UserCreateWithoutChatsWithFirstUsersInput
  connectOrCreate: UserCreateOrConnectWithoutChatsWithFirstUsersInput
  upsert: UserUpsertWithoutChatsWithFirstUsersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutChatsWithFirstUsersInput
}

input UserUpsertWithoutChatsWithFirstUsersInput {
  update: UserUpdateWithoutChatsWithFirstUsersInput!
  create: UserCreateWithoutChatsWithFirstUsersInput!
}

input UserUpdateWithoutChatsWithFirstUsersInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  applicantProfile: ApplicantProfileUpdateOneWithoutUserNestedInput
  employerProfile: EmployerProfileUpdateOneWithoutUserNestedInput
  chatWithAdmin: AdminChatUpdateOneWithoutUserNestedInput
  chatsWithSecondUsers: ChatUpdateManyWithoutSecondUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatMessageUpdateManyWithoutChatNestedInput {
  create: [ChatMessageCreateWithoutChatInput!]
  connectOrCreate: [ChatMessageCreateOrConnectWithoutChatInput!]
  upsert: [ChatMessageUpsertWithWhereUniqueWithoutChatInput!]
  createMany: ChatMessageCreateManyChatInputEnvelope
  set: [ChatMessageWhereUniqueInput!]
  disconnect: [ChatMessageWhereUniqueInput!]
  delete: [ChatMessageWhereUniqueInput!]
  connect: [ChatMessageWhereUniqueInput!]
  update: [ChatMessageUpdateWithWhereUniqueWithoutChatInput!]
  updateMany: [ChatMessageUpdateManyWithWhereWithoutChatInput!]
  deleteMany: [ChatMessageScalarWhereInput!]
}

input ChatMessageUpsertWithWhereUniqueWithoutChatInput {
  where: ChatMessageWhereUniqueInput!
  update: ChatMessageUpdateWithoutChatInput!
  create: ChatMessageCreateWithoutChatInput!
}

input ChatMessageUpdateWithoutChatInput {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ChatMessageUpdateWithWhereUniqueWithoutChatInput {
  where: ChatMessageWhereUniqueInput!
  data: ChatMessageUpdateWithoutChatInput!
}

input ChatMessageUpdateManyWithWhereWithoutChatInput {
  where: ChatMessageScalarWhereInput!
  data: ChatMessageUpdateManyMutationInput!
}

input ChatMessageScalarWhereInput {
  AND: [ChatMessageScalarWhereInput!]
  OR: [ChatMessageScalarWhereInput!]
  NOT: [ChatMessageScalarWhereInput!]
  id: StringFilter
  chatId: StringFilter
  message: StringFilter
  createdAt: DateTimeFilter
}

input ChatMessageUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ChatUpdateWithWhereUniqueWithoutSecondUserInput {
  where: ChatWhereUniqueInput!
  data: ChatUpdateWithoutSecondUserInput!
}

input ChatUpdateManyWithWhereWithoutSecondUserInput {
  where: ChatScalarWhereInput!
  data: ChatUpdateManyMutationInput!
}

input ChatScalarWhereInput {
  AND: [ChatScalarWhereInput!]
  OR: [ChatScalarWhereInput!]
  NOT: [ChatScalarWhereInput!]
  id: StringFilter
  firstUserId: StringFilter
  secondUserId: StringFilter
  viewedByFirst: BoolFilter
  viewedBySecond: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ChatUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  viewedByFirst: BoolFieldUpdateOperationsInput
  viewedBySecond: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ResumeSavedByEmployerUpdateWithWhereUniqueWithoutEmployerProfileInput {
  where: ResumeSavedByEmployerWhereUniqueInput!
  data: ResumeSavedByEmployerUpdateWithoutEmployerProfileInput!
}

input ResumeSavedByEmployerUpdateManyWithWhereWithoutEmployerProfileInput {
  where: ResumeSavedByEmployerScalarWhereInput!
  data: ResumeSavedByEmployerUpdateManyMutationInput!
}

input ResumeSavedByEmployerScalarWhereInput {
  AND: [ResumeSavedByEmployerScalarWhereInput!]
  OR: [ResumeSavedByEmployerScalarWhereInput!]
  NOT: [ResumeSavedByEmployerScalarWhereInput!]
  employerProfileId: StringFilter
  resumeId: StringFilter
  assignedAt: DateTimeFilter
}

input ResumeSavedByEmployerUpdateManyMutationInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input VacancyUpdateManyWithoutEmployerNestedInput {
  create: [VacancyCreateWithoutEmployerInput!]
  connectOrCreate: [VacancyCreateOrConnectWithoutEmployerInput!]
  upsert: [VacancyUpsertWithWhereUniqueWithoutEmployerInput!]
  createMany: VacancyCreateManyEmployerInputEnvelope
  set: [VacancyWhereUniqueInput!]
  disconnect: [VacancyWhereUniqueInput!]
  delete: [VacancyWhereUniqueInput!]
  connect: [VacancyWhereUniqueInput!]
  update: [VacancyUpdateWithWhereUniqueWithoutEmployerInput!]
  updateMany: [VacancyUpdateManyWithWhereWithoutEmployerInput!]
  deleteMany: [VacancyScalarWhereInput!]
}

input VacancyUpsertWithWhereUniqueWithoutEmployerInput {
  where: VacancyWhereUniqueInput!
  update: VacancyUpdateWithoutEmployerInput!
  create: VacancyCreateWithoutEmployerInput!
}

input VacancyUpdateWithoutEmployerInput {
  id: StringFieldUpdateOperationsInput
  salary: IntFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  post: StringFieldUpdateOperationsInput
  fieldOfActivity: IntFieldUpdateOperationsInput
  placeOfWork: IntFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  duties: NullableStringFieldUpdateOperationsInput
  requirements: NullableStringFieldUpdateOperationsInput
  workingSchedule: NullableStringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  phoneHidden: BoolFieldUpdateOperationsInput
  archived: BoolFieldUpdateOperationsInput
  archivedReason: NullableStringFieldUpdateOperationsInput
  savedBy: VacancySavedByApplicantUpdateManyWithoutVacancyNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VacancySavedByApplicantUpdateManyWithoutVacancyNestedInput {
  create: [VacancySavedByApplicantCreateWithoutVacancyInput!]
  connectOrCreate: [VacancySavedByApplicantCreateOrConnectWithoutVacancyInput!]
  upsert: [VacancySavedByApplicantUpsertWithWhereUniqueWithoutVacancyInput!]
  createMany: VacancySavedByApplicantCreateManyVacancyInputEnvelope
  set: [VacancySavedByApplicantWhereUniqueInput!]
  disconnect: [VacancySavedByApplicantWhereUniqueInput!]
  delete: [VacancySavedByApplicantWhereUniqueInput!]
  connect: [VacancySavedByApplicantWhereUniqueInput!]
  update: [VacancySavedByApplicantUpdateWithWhereUniqueWithoutVacancyInput!]
  updateMany: [VacancySavedByApplicantUpdateManyWithWhereWithoutVacancyInput!]
  deleteMany: [VacancySavedByApplicantScalarWhereInput!]
}

input VacancySavedByApplicantUpsertWithWhereUniqueWithoutVacancyInput {
  where: VacancySavedByApplicantWhereUniqueInput!
  update: VacancySavedByApplicantUpdateWithoutVacancyInput!
  create: VacancySavedByApplicantCreateWithoutVacancyInput!
}

input VacancySavedByApplicantUpdateWithoutVacancyInput {
  applicantProfile: ApplicantProfileUpdateOneRequiredWithoutSavedVacanciesNestedInput
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input ApplicantProfileUpdateOneRequiredWithoutSavedVacanciesNestedInput {
  create: ApplicantProfileCreateWithoutSavedVacanciesInput
  connectOrCreate: ApplicantProfileCreateOrConnectWithoutSavedVacanciesInput
  upsert: ApplicantProfileUpsertWithoutSavedVacanciesInput
  connect: ApplicantProfileWhereUniqueInput
  update: ApplicantProfileUpdateWithoutSavedVacanciesInput
}

input ApplicantProfileUpsertWithoutSavedVacanciesInput {
  update: ApplicantProfileUpdateWithoutSavedVacanciesInput!
  create: ApplicantProfileCreateWithoutSavedVacanciesInput!
}

input ApplicantProfileUpdateWithoutSavedVacanciesInput {
  id: StringFieldUpdateOperationsInput
  resume: ResumeUpdateOneWithoutApplicantProfileNestedInput
  user: UserUpdateOneRequiredWithoutApplicantProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VacancySavedByApplicantUpdateWithWhereUniqueWithoutVacancyInput {
  where: VacancySavedByApplicantWhereUniqueInput!
  data: VacancySavedByApplicantUpdateWithoutVacancyInput!
}

input VacancySavedByApplicantUpdateManyWithWhereWithoutVacancyInput {
  where: VacancySavedByApplicantScalarWhereInput!
  data: VacancySavedByApplicantUpdateManyMutationInput!
}

input VacancyUpdateWithWhereUniqueWithoutEmployerInput {
  where: VacancyWhereUniqueInput!
  data: VacancyUpdateWithoutEmployerInput!
}

input VacancyUpdateManyWithWhereWithoutEmployerInput {
  where: VacancyScalarWhereInput!
  data: VacancyUpdateManyMutationInput!
}

input VacancyScalarWhereInput {
  AND: [VacancyScalarWhereInput!]
  OR: [VacancyScalarWhereInput!]
  NOT: [VacancyScalarWhereInput!]
  id: StringFilter
  employerId: StringFilter
  salary: IntFilter
  views: IntFilter
  post: StringFilter
  fieldOfActivity: IntFilter
  placeOfWork: IntFilter
  description: StringFilter
  duties: StringNullableFilter
  requirements: StringNullableFilter
  workingSchedule: StringNullableFilter
  phone: StringFilter
  phoneHidden: BoolFilter
  archived: BoolFilter
  archivedReason: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input VacancyUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  salary: IntFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  post: StringFieldUpdateOperationsInput
  fieldOfActivity: IntFieldUpdateOperationsInput
  placeOfWork: IntFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  duties: NullableStringFieldUpdateOperationsInput
  requirements: NullableStringFieldUpdateOperationsInput
  workingSchedule: NullableStringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  phoneHidden: BoolFieldUpdateOperationsInput
  archived: BoolFieldUpdateOperationsInput
  archivedReason: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatUpdateWithWhereUniqueWithoutFirstUserInput {
  where: ChatWhereUniqueInput!
  data: ChatUpdateWithoutFirstUserInput!
}

input ChatUpdateManyWithWhereWithoutFirstUserInput {
  where: ChatScalarWhereInput!
  data: ChatUpdateManyMutationInput!
}

input ResumeSavedByEmployerUpdateWithWhereUniqueWithoutResumeInput {
  where: ResumeSavedByEmployerWhereUniqueInput!
  data: ResumeSavedByEmployerUpdateWithoutResumeInput!
}

input ResumeSavedByEmployerUpdateManyWithWhereWithoutResumeInput {
  where: ResumeSavedByEmployerScalarWhereInput!
  data: ResumeSavedByEmployerUpdateManyMutationInput!
}

input AdminChatMessageCreateManyInput {
  id: String
  chatId: String!
  message: String!
  createdAt: DateTime
}

input AdminChatMessageCreateInput {
  id: String
  chat: AdminChatCreateNestedOneWithoutMessagesInput!
  message: String!
  createdAt: DateTime
}

input AdminChatCreateNestedOneWithoutMessagesInput {
  create: AdminChatCreateWithoutMessagesInput
  connectOrCreate: AdminChatCreateOrConnectWithoutMessagesInput
  connect: AdminChatWhereUniqueInput
}

input AdminChatCreateWithoutMessagesInput {
  id: String
  user: UserCreateNestedOneWithoutChatWithAdminInput!
  viewedByUser: Boolean
  viewedByAdmin: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input AdminChatCreateOrConnectWithoutMessagesInput {
  where: AdminChatWhereUniqueInput!
  create: AdminChatCreateWithoutMessagesInput!
}

input AdminChatMessageUpdateInput {
  id: StringFieldUpdateOperationsInput
  chat: AdminChatUpdateOneRequiredWithoutMessagesNestedInput
  message: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input AdminChatUpdateOneRequiredWithoutMessagesNestedInput {
  create: AdminChatCreateWithoutMessagesInput
  connectOrCreate: AdminChatCreateOrConnectWithoutMessagesInput
  upsert: AdminChatUpsertWithoutMessagesInput
  connect: AdminChatWhereUniqueInput
  update: AdminChatUpdateWithoutMessagesInput
}

input AdminChatUpsertWithoutMessagesInput {
  update: AdminChatUpdateWithoutMessagesInput!
  create: AdminChatCreateWithoutMessagesInput!
}

input AdminChatUpdateWithoutMessagesInput {
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutChatWithAdminNestedInput
  viewedByUser: BoolFieldUpdateOperationsInput
  viewedByAdmin: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ApplicantProfileCreateManyInput {
  id: String
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ApplicantProfileCreateInput {
  id: String
  resume: ResumeCreateNestedOneWithoutApplicantProfileInput
  savedVacancies: VacancySavedByApplicantCreateNestedManyWithoutApplicantProfileInput
  user: UserCreateNestedOneWithoutApplicantProfileInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input ApplicantProfileUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ApplicantProfileUpdateInput {
  id: StringFieldUpdateOperationsInput
  resume: ResumeUpdateOneWithoutApplicantProfileNestedInput
  savedVacancies: VacancySavedByApplicantUpdateManyWithoutApplicantProfileNestedInput
  user: UserUpdateOneRequiredWithoutApplicantProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ApplicationCreateManyInput {
  id: String
  type: ApplicationType!
  addition: JSON
  createdAt: DateTime
}

input ApplicationCreateInput {
  id: String
  type: ApplicationType!
  addition: JSON
  createdAt: DateTime
}

input ApplicationUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  type: EnumApplicationTypeFieldUpdateOperationsInput
  addition: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
}

input EnumApplicationTypeFieldUpdateOperationsInput {
  set: ApplicationType
}

input ApplicationUpdateInput {
  id: StringFieldUpdateOperationsInput
  type: EnumApplicationTypeFieldUpdateOperationsInput
  addition: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ChatCreateManyInput {
  id: String
  firstUserId: String!
  secondUserId: String!
  viewedByFirst: Boolean
  viewedBySecond: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatCreateInput {
  id: String
  firstUser: UserCreateNestedOneWithoutChatsWithFirstUsersInput!
  secondUser: UserCreateNestedOneWithoutChatsWithSecondUsersInput!
  viewedByFirst: Boolean
  viewedBySecond: Boolean
  messages: ChatMessageCreateNestedManyWithoutChatInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatUpdateInput {
  id: StringFieldUpdateOperationsInput
  firstUser: UserUpdateOneRequiredWithoutChatsWithFirstUsersNestedInput
  secondUser: UserUpdateOneRequiredWithoutChatsWithSecondUsersNestedInput
  viewedByFirst: BoolFieldUpdateOperationsInput
  viewedBySecond: BoolFieldUpdateOperationsInput
  messages: ChatMessageUpdateManyWithoutChatNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatMessageCreateManyInput {
  id: String
  chatId: String!
  message: String!
  createdAt: DateTime
}

input ChatMessageCreateInput {
  id: String
  chat: ChatCreateNestedOneWithoutMessagesInput!
  message: String!
  createdAt: DateTime
}

input ChatCreateNestedOneWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput
  connectOrCreate: ChatCreateOrConnectWithoutMessagesInput
  connect: ChatWhereUniqueInput
}

input ChatCreateWithoutMessagesInput {
  id: String
  firstUser: UserCreateNestedOneWithoutChatsWithFirstUsersInput!
  secondUser: UserCreateNestedOneWithoutChatsWithSecondUsersInput!
  viewedByFirst: Boolean
  viewedBySecond: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatCreateOrConnectWithoutMessagesInput {
  where: ChatWhereUniqueInput!
  create: ChatCreateWithoutMessagesInput!
}

input ChatMessageUpdateInput {
  id: StringFieldUpdateOperationsInput
  chat: ChatUpdateOneRequiredWithoutMessagesNestedInput
  message: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ChatUpdateOneRequiredWithoutMessagesNestedInput {
  create: ChatCreateWithoutMessagesInput
  connectOrCreate: ChatCreateOrConnectWithoutMessagesInput
  upsert: ChatUpsertWithoutMessagesInput
  connect: ChatWhereUniqueInput
  update: ChatUpdateWithoutMessagesInput
}

input ChatUpsertWithoutMessagesInput {
  update: ChatUpdateWithoutMessagesInput!
  create: ChatCreateWithoutMessagesInput!
}

input ChatUpdateWithoutMessagesInput {
  id: StringFieldUpdateOperationsInput
  firstUser: UserUpdateOneRequiredWithoutChatsWithFirstUsersNestedInput
  secondUser: UserUpdateOneRequiredWithoutChatsWithSecondUsersNestedInput
  viewedByFirst: BoolFieldUpdateOperationsInput
  viewedBySecond: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployerProfileCreateManyInput {
  id: String
  companyName: String!
  description: String!
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input EmployerProfileCreateInput {
  id: String
  companyName: String!
  description: String!
  savedResumes: ResumeSavedByEmployerCreateNestedManyWithoutEmployerProfileInput
  user: UserCreateNestedOneWithoutEmployerProfileInput!
  vacancies: VacancyCreateNestedManyWithoutEmployerInput
  createdAt: DateTime
  updatedAt: DateTime
}

input EmployerProfileUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  companyName: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployerProfileUpdateInput {
  id: StringFieldUpdateOperationsInput
  companyName: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  savedResumes: ResumeSavedByEmployerUpdateManyWithoutEmployerProfileNestedInput
  user: UserUpdateOneRequiredWithoutEmployerProfileNestedInput
  vacancies: VacancyUpdateManyWithoutEmployerNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ResumeCreateManyInput {
  id: String
  views: Int
  firstname: String!
  lastname: String
  phone: String!
  phoneHidden: Boolean!
  birthday: DateTime!
  placeOfResidence: Int!
  desiredPost: String
  fieldOfActivity: Int!
  education: String
  experience: String
  aboutMe: String
  applicantProfileId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ResumeCreateInput {
  id: String
  views: Int
  firstname: String!
  lastname: String
  phone: String!
  phoneHidden: Boolean!
  birthday: DateTime!
  placeOfResidence: Int!
  desiredPost: String
  fieldOfActivity: Int!
  education: String
  experience: String
  aboutMe: String
  applicantProfile: ApplicantProfileCreateNestedOneWithoutResumeInput!
  savedBy: ResumeSavedByEmployerCreateNestedManyWithoutResumeInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ResumeUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  phoneHidden: BoolFieldUpdateOperationsInput
  birthday: DateTimeFieldUpdateOperationsInput
  placeOfResidence: IntFieldUpdateOperationsInput
  desiredPost: NullableStringFieldUpdateOperationsInput
  fieldOfActivity: IntFieldUpdateOperationsInput
  education: NullableStringFieldUpdateOperationsInput
  experience: NullableStringFieldUpdateOperationsInput
  aboutMe: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ResumeUpdateInput {
  id: StringFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  phoneHidden: BoolFieldUpdateOperationsInput
  birthday: DateTimeFieldUpdateOperationsInput
  placeOfResidence: IntFieldUpdateOperationsInput
  desiredPost: NullableStringFieldUpdateOperationsInput
  fieldOfActivity: IntFieldUpdateOperationsInput
  education: NullableStringFieldUpdateOperationsInput
  experience: NullableStringFieldUpdateOperationsInput
  aboutMe: NullableStringFieldUpdateOperationsInput
  applicantProfile: ApplicantProfileUpdateOneRequiredWithoutResumeNestedInput
  savedBy: ResumeSavedByEmployerUpdateManyWithoutResumeNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ResumeSavedByEmployerCreateManyInput {
  employerProfileId: String!
  resumeId: String!
  assignedAt: DateTime
}

input ResumeSavedByEmployerCreateInput {
  employerProfile: EmployerProfileCreateNestedOneWithoutSavedResumesInput!
  resume: ResumeCreateNestedOneWithoutSavedByInput!
  assignedAt: DateTime
}

input ResumeSavedByEmployerUpdateInput {
  employerProfile: EmployerProfileUpdateOneRequiredWithoutSavedResumesNestedInput
  resume: ResumeUpdateOneRequiredWithoutSavedByNestedInput
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input UserCreateManyInput {
  id: String
  login: String!
  role: UserRole!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateInput {
  id: String
  login: String!
  role: UserRole!
  applicantProfile: ApplicantProfileCreateNestedOneWithoutUserInput
  employerProfile: EmployerProfileCreateNestedOneWithoutUserInput
  chatWithAdmin: AdminChatCreateNestedOneWithoutUserInput
  chatsWithFirstUsers: ChatCreateNestedManyWithoutFirstUserInput
  chatsWithSecondUsers: ChatCreateNestedManyWithoutSecondUserInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  applicantProfile: ApplicantProfileUpdateOneWithoutUserNestedInput
  employerProfile: EmployerProfileUpdateOneWithoutUserNestedInput
  chatWithAdmin: AdminChatUpdateOneWithoutUserNestedInput
  chatsWithFirstUsers: ChatUpdateManyWithoutFirstUserNestedInput
  chatsWithSecondUsers: ChatUpdateManyWithoutSecondUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VacancyCreateManyInput {
  id: String
  employerId: String!
  salary: Int!
  views: Int
  post: String!
  fieldOfActivity: Int!
  placeOfWork: Int!
  description: String!
  duties: String
  requirements: String
  workingSchedule: String
  phone: String!
  phoneHidden: Boolean!
  archived: Boolean
  archivedReason: String
  createdAt: DateTime
  updatedAt: DateTime
}

input VacancyCreateInput {
  id: String
  employer: EmployerProfileCreateNestedOneWithoutVacanciesInput!
  salary: Int!
  views: Int
  post: String!
  fieldOfActivity: Int!
  placeOfWork: Int!
  description: String!
  duties: String
  requirements: String
  workingSchedule: String
  phone: String!
  phoneHidden: Boolean!
  archived: Boolean
  archivedReason: String
  savedBy: VacancySavedByApplicantCreateNestedManyWithoutVacancyInput
  createdAt: DateTime
  updatedAt: DateTime
}

input VacancyUpdateInput {
  id: StringFieldUpdateOperationsInput
  employer: EmployerProfileUpdateOneRequiredWithoutVacanciesNestedInput
  salary: IntFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  post: StringFieldUpdateOperationsInput
  fieldOfActivity: IntFieldUpdateOperationsInput
  placeOfWork: IntFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  duties: NullableStringFieldUpdateOperationsInput
  requirements: NullableStringFieldUpdateOperationsInput
  workingSchedule: NullableStringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  phoneHidden: BoolFieldUpdateOperationsInput
  archived: BoolFieldUpdateOperationsInput
  archivedReason: NullableStringFieldUpdateOperationsInput
  savedBy: VacancySavedByApplicantUpdateManyWithoutVacancyNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VacancySavedByApplicantCreateManyInput {
  applicantProfileId: String!
  vacancyId: String!
  assignedAt: DateTime
}

input VacancySavedByApplicantCreateInput {
  applicantProfile: ApplicantProfileCreateNestedOneWithoutSavedVacanciesInput!
  vacancy: VacancyCreateNestedOneWithoutSavedByInput!
  assignedAt: DateTime
}

input VacancySavedByApplicantUpdateInput {
  applicantProfile: ApplicantProfileUpdateOneRequiredWithoutSavedVacanciesNestedInput
  vacancy: VacancyUpdateOneRequiredWithoutSavedByNestedInput
  assignedAt: DateTimeFieldUpdateOperationsInput
}

type SendMessageOutput {
  authToken: String!
}

input SendMessageInput {
  phone: String!
}

type VerifyAuthCodeOutput {
  authenticated: Boolean!
  authToken: String
}

input VerifyAuthCodeInput {
  authToken: String!
  code: String!
}

type AccessTokenOutput {
  accessToken: String!
}

input LoginUserInput {
  authToken: String!
}

input CreateAndLoginUserInput {
  authToken: String!
  data: CreateAndLoginUserInputData!
}

input CreateAndLoginUserInputData {
  role: String!
}

input LoginAdminInput {
  login: String!
  password: String!
}

"""
Represents NULL values
"""
scalar Void
